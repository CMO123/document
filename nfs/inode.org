* nfs4file.c 

** nfs4_open_context
   #+BEGIN_SRC 
	struct nfs_lock_context lock_context;
	struct dentry *dentry;
	struct rpc_cred *cred;
	struct nfs4_state *state;
	fmode_t mode;

	unsigned long flags;
#define NFS_CONTEXT_ERROR_WRITE		(0)
#define NFS_CONTEXT_RESEND_WRITES	(1)
#define NFS_CONTEXT_BAD			(2)
	int error;

	struct list_head list;    //nfs_inode->open_files
	struct nfs4_threshold	*mdsthreshold;   
	// nfs4_open_context把file和inode关联起来, 每个open有一个nfs4_open_context
   #+END_SRC

** nfs_lock_context
   #+BEGIN_SRC 
	atomic_t count;
	struct list_head list;
	struct nfs_open_context *open_context;
	struct nfs_lockowner lockowner;
	struct nfs_io_counter io_count;   
   #+END_SRC

** nfs_inode 
   #+BEGIN_SRC 
	/*
	 * The 64bit 'inode number'
	 */
	__u64 fileid;

	/*
	 * NFS file handle
	 */
	struct nfs_fh		fh;

	/*
	 * Various flags
	 */
	unsigned long		flags;			/* atomic bit ops */
	unsigned long		cache_validity;		/* bit mask */

	/*
	 * read_cache_jiffies is when we started read-caching this inode.
	 * attrtimeo is for how long the cached information is assumed
	 * to be valid. A successful attribute revalidation doubles
	 * attrtimeo (up to acregmax/acdirmax), a failure resets it to
	 * acregmin/acdirmin.
	 *
	 * We need to revalidate the cached attrs for this inode if
	 *
	 *	jiffies - read_cache_jiffies >= attrtimeo
	 *
	 * Please note the comparison is greater than or equal
	 * so that zero timeout values can be specified.
	 */
	unsigned long		read_cache_jiffies;
	unsigned long		attrtimeo;
	unsigned long		attrtimeo_timestamp;

	unsigned long		attr_gencount;
	/* "Generation counter" for the attribute cache. This is
	 * bumped whenever we update the metadata on the
	 * server.
	 */
	unsigned long		cache_change_attribute;

	struct rb_root		access_cache;
	struct list_head	access_cache_entry_lru;
	struct list_head	access_cache_inode_lru;
#ifdef CONFIG_NFS_V3_ACL
	struct posix_acl	*acl_access;
	struct posix_acl	*acl_default;
#endif

	/*
	 * This is the cookie verifier used for NFSv3 readdir
	 * operations
	 */
	__be32			cookieverf[2];

	unsigned long		npages;
	struct nfs_mds_commit_info commit_info;

	/* Open contexts for shared mmap writes */
	struct list_head	open_files;

	/* Number of in-flight sillydelete RPC calls */
	atomic_t		silly_count;
	/* List of deferred sillydelete requests */
	struct hlist_head	silly_list;
	wait_queue_head_t	waitqueue;

#if IS_ENABLED(CONFIG_NFS_V4)
	struct nfs4_cached_acl	*nfs4_acl;
        /* NFSv4 state */
	struct list_head	open_states;
	struct nfs_delegation __rcu *delegation;
	fmode_t			 delegation_state;
	struct rw_semaphore	rwsem;

	/* pNFS layout information */
	struct pnfs_layout_hdr *layout;
#endif /* CONFIG_NFS_V4*/
	/* how many bytes have been written/read and how many bytes queued up */
	__u64 write_io;
	__u64 read_io;
#ifdef CONFIG_NFS_FSCACHE
	struct fscache_cookie	*fscache;
#endif
	struct inode		vfs_inode;   
   #+END_SRC

** nfs4_file_open(inode, filp)
   - 这里只负责打开文件,不管创建文件.
   - 创建nfs4_open_context
   > nfs_rpc_ops->open_context(dir, nfs_open_context, openflags, iattr)
   - 关联filp, nfs_open_context, nfs_inode

** nfs4_file_fsync(file, start, end, datasync)
   - 这是file_operations->fsync操作, 刷回所有的数据 
   > filemap_write_and_wait_range(inode->address_space, start, end)
   - 写回commit的nfs_page
   > nfs_file_fsync_commit(file, start, end, datasync)
   - 如果datasync == 0, 刷回metadata
   > pnfs_layoutcommit_inode(inode, true)

* file.c 

** 总结
   - 这时普通的nfs file operations的实现,对于nfsv4, 只有flush/open特殊对待

** nfs_file_release(inode, file)
   - 调用inode操作
   > nfs_release(inode, file)

** nfs_revalidate_file_size(inode, file)
   - 在llseek/write时确定文件长度
   - 如果有delegation, 不需要检查
   > nfs_have_delegated_attributes(inode)
   - 如果是O_DIRECT, 必须确认, file->f_flags & O_DIRECT
   - 如果nfs_inode->cache_validity有NFS_INO_REVAL_PAGECACHE, 必须确认
   - 如果inode信息超时,必须确认, nfs_inode->attrtimeo - nfs_inode->read_cache_jiffies
   - 使用getattr获取metadata
   > __nfs_revalidate_inode(nfs_server, inode)

** nfs_file_llseek(file, offset, whence)
   - 如果是SEEK_END, SEEK_DATA, SEEK_HOLE, 必须检查文件大小 
   > nfs_revalidate_file_size(inode, file)
   > generic_file_llseek(file, offset, whence)

** nfs_file_flush(file, fl_owner_t)
   - 如果有write的delegation, 只需要发起写操作
   > nfs_rpc_ops->have_delegation(inode, FMODE_WRITE)
   > filemap_fdatawrite(address_space)
   - 否则需要调用fsync, 也就是
   > vfs_fsync(file, 0)

** nfs_file_read(kiocb, iovec, nr_segs, pos)
   - 普通写操作,首先确认pagecache有效性
   > nfs_revalidate_mapping(inode, kiocb->file->address_space)
   > generic_file_aio_read(kiocb, iov, nr_segs, pos)

** nfs_file_splice_read(file, pos, pipe_inode_info, count, flags)
   - 每次写之前,都要检查pagecache的有效性.
   > nfs_revalidate_mapping(inode, address_space)
   > generic_file_splice_read(file, pos, pipe, count, flags)

** nfs_file_mmap(file, vm_area_struct)
   > generic_file_mmap(file, vm_area_struct)
   - 设置aops = nfs_file_vm_ops
   > nfs_revalidate_mapping(inode, address_space)

** nfs_file_fsync_commit(file, start, end, datasync)
   - fsync时写回commit的数据
   > nfs_commit_inode(inode, FLUSH_SYNC)
   - 如果nfs_open_context->flags有NFS_CONTEXT_ERROR_WRITE, 返回nfs_open_context->error
   - 如果nfs_open_context->flags有NFS_CONTEXT_RESEND_WRITES, 返回-EAGAIN

** nfs_file_sync(file, start, end, datasync)
   - nfsv3使用, 只是写回数据

** nfs_want_read_modify_write(file, page, pos, len)
   - 检查是否需要读操作
   - 如果是先先写再读,需要先把一些数据写回,再读出来,会减低效率.如果先读再改,至少数据是uptodate.
   - 如果要写的数据不会完全覆盖page, 而且他不是PG_uptodate, 而且不在IO过程中,可以先读取数据, 防止后面的读操作.
   - 满足这些提交,就可以读取page
   > file->f_mode & FMODE_READ, 没有PG_uptodate, PG_private, (pos,len)没有完全覆盖page

** nfs_write_begin(file, address_space, pos, len, flags, page, fsdata)
   - 首先等待刷数据操作, 在writepages中锁住, 禁止写数据??
   - 这样效率岂不是很低??
   > wait_on_bit(&NFS_I(mapping->host)->flags, NFS_INO_FLUSHING, nfs_wait_bit_killable, TASK_KILLABLE)
   - 准备pagecache, 并且锁住page. 这时page没有PG_uptodate, 没有PG_dirty
   > grab_cache_page_write_begin(address_space, index, flags)
   - 检查page关联的nfs_page是否和current兼容,如果不兼容,就写回去,释放nfs_page
   > nfs_flush_incompatible(file, page)
   - 检查是否有必要读page. 如果他原来有一些有效数据,已经写给server,但不是全部, 而且这次写的数据也不是全部,而且是读访问打开文件,所以建议读取整个page
   > nfs_readpage(file, page)

** nfs_write_end(file, address_space, pos, len, copied, page, fsdata)
   - 如果page没有PG_uptodate, 检查文件大小,把范围外的清0
   - 更新nfs_page,page, file等数据
   > nfs_uptodate(file, page, offset, copied)
   - 最后释放page的PG_locked

** nfs_release_page(page, gfp)
   - 释放page, 如果有PG_private, 不能释放它

** nfs_check_dirty_writeback(page, dirty, writeback)
   - 检查page的dirty和writeback状态
   - 如果在commit过程中,肯定是writeback
   - nfs_inode->flags的NFS_INO_COMMIT
   - 如果page有nfs_page, 肯定是dirty的

** nfs_launder_page(page)
   - 释放page->private
   > nfs_wb_page(inode, page)

** nfs_need_sync_write(file, inode)
   - inode是同步的, 应该是文件系统是同步的.
   - 文件访问方式是同步的 inode->f_flags & O_DSYNC
   - nfs_open_context->flags包含NFS_CONTEXT_ERROR_WRITE

** nfs_file_write(kiocb, iovec, nr_segs, pos)
   > generic_file_aio_write(kiocb, iovec, nr_segs, pos)
   - 写完后,如果有必要刷新,使用fsync  
   > nfs_need_sync_write(file, inode)
   > vfs_fsync(file, 0)
   - 这里写到pagecache后就开始刷会server

** do_getlk(file, file_lock, local)
   - 查找本地
   > posix_test_lock(file, file_lock)
   - 如果没有, 而且有FMODE_READ的delegation, server也没有锁
   - 否则发送lock请求

** do_unlk(file, cmd, file_lock, is_local)
   - 先刷回数据, 对于setlk同样
   > nfs_sync_mapping(address_space)

* inode.c

** nfs_drop_inode(inode)
   - 检查inode是否应该继续缓存
   - 检查nfs_inode->flags的NFS_INO_STALE, 如果无效立刻释放
   - 检查inode->i_nlinks, 还有inode_unhashed, 如果被删除会时刻释放,unhash应该不会真
   > generic_drop_inode(inode)
   
** nfs_clear_inode(inode)
   - 释放inode/nfs_inode的数据结构的资源
   - inode应该没有写回的page, nfs_inode->npages == 0, 在写回时增加它
   - 没有被打开使用, 没有关联的nfs_open_context
   - 释放acl
   - access cache是什么?? 是dir中使用的东西??
   > nfs_access_zap_cache(inode)
   
** nfs_evict_inode(inode)
   - 释放page map, 以及page
   > truncate_inode_pages(inode->address_space, 0)
   - 设置inode->i_state的I_FREEING|I_CLEAR, inode不能使用了
   > clear_inode(inode)
   - 释放acl, access cache
   > nfs_clear_inode(inode)

** nfs_sync_mapping(address_space)
   - 写回pagecache的脏数据, 在lock操作中使用. metadata同样也写回
   - 释放page map
   > unmap_mapping_range(address_space, 0, 0, 0)
   - 就是sync操作
   > nfs_wb_all(inode)

** nfs_zap_caches_locked(inode)
   - 删除local的缓存
   - 重新设置nfs_inode->attrtimeo, attrtimeo_timestap = jiffies. 再检查metadata有效性时会使用.
   - 下面把所有metadata情况,所以不会使用这里
   - 清除nfs_inode->cookieverf, nfsv3使用的dir cookie
   - 设置nfs_inode->cache_validity的NFS_INO_INVALID_ATTR, NFS_INO_INVALID_LABEL, NFS_INO_INVALID_DATA, NFS_INODE_INVALID_ACL, 还有NFS_INO_REVAL_PAGECACHE

** nfs_zap_caches(inode)
   - 使用inode->i_lock保护
   > nfs_zap_caches_locked(nfs_inode)

** nfs_zap_mapping(inode, address_space)
   - 设置nfs_inode->cache_validity的NFS_INO_INVALID_DATA
   - pagecache无效?为何不删除数据?

** nfs_zap_acl_cache(inode)
   - 单独释放acl
   > nfs_inode->clear_acl_cache(inode)
   - 去掉nfs_inode->cache_validity的NFS_INO_INVALID_ACL标志

** nfs_invalidate_atime(inode)
   - atime失效, 去掉nfs_inode->cache_validity的NFS_INO_INVALID_ATIME

** nfs_invalidate_inode(inode)
   - 设置nfs_inode->flags的NFS_INO_STALE, 整个inode失效
   - 设置所有的invalid标志
   > nfs_zap_caches_locked(inode)

** nfs_init_locked(inode, void)
   - 初始化inode使用, 设置fileid, nfsfh

** nfs_fhget(super_block, nfs_fh, nfs_fattr, nfs_label)
   - 根据参数查找inode, 如果找不到,会创建一个
   - 检查nfs_fattr中fileid的来源.
   > nfs_attr_check_mountpoint(super_block, nfs_attr)
   - 获取inode , 计算hash
   > nfs_fattr_to_ino_t(nfs_fattr)
   > iget5_locked(super_block, hash, nfs_find_actor, nfs_init_locked, nfs_descriptor)
   - 如果inode是新创建的,需要做初始化
   - 设置inode->i_flags的S_NOATIME|S_NOCTIME, 本地不会更新这些属性,由server更新. mtime??
   - 如果nfs_fattr->valid没有NFS_ATTR_FATTR_MODE, 设置nfs_inode->cache_validity的NFS_INO_INVALID_ATTR. 基本的metadata是无效的
   - inode_operations = nfs_rpc_ops->file_inode_ops, file_operations
   - 如果是reg文件,设置address_space, 他使用的bdi是nfs_server->backing_dev_info, 这是每个server特有的??
   - 如果是dir文件,nfs_fattr->valid带有NFS_ATTR_FATTR_MOUNTPOINT, inode设置为automount, inode_operations = nfs_mountpoint_inode_operations
   - 如果nfs_fattr->valid带有NFS_ATTR_FATTR_V4_REFERRAL, 同样设置automount, inode_operations = nfs_referral_inode_operations
   - 上面2个inode_operations只有attr的修改,没有其他操作,比如创建删除文件等
   - 最后根据nfs_fattr更新inode/nfs_inode
   - 如果有NFS_ATTR_FATTR_ATIME, 设置atime, 否则如果server支持atime, 设置nfs_inode->cache_validity的NFS_INO_INVALID_ATTR
   - mtime, ctime也同样.
   - 如果NFS_ATTR_FATTR_CHANGE有效, 设置inode->i_version = nfs_fattr->change_attr
   - NFS_ATTR_FATTR_NLINK设置i_nlink, 如果没有设置NFS_INO_INVALID_ATTR
   - NFS_ATTR_FATTR_OWNER|GROUP, 设置uid/gid
   - NFS_ATTR_FATTR_SIZE设置i_size, 如果没有,设置NFS_INO_INVALID_ATTR|NFS_INO_REVAL_PAGECACHE
   - 上面除了size, server都可设置是否支持特定的metadata
   - 然后设置attrtimeo, attrtimeo_timestamp
   - 如果inode不是新创建,使用nfs_fattr修改它的属性
   > nfs_refresh_inode(inode, nfs_fattr)

** nfs_setattr(dentry, iattr)
   - 设置metadata, 检查是否需要通过rpc设置
   - 首先检查ATTR_MODE, 不支持suid,sdig, ATTR_SIZE,检查文件大小是否需要改变
   - nfs支持的matadata是NFS_VALID_ATTRS, 设置iattr->ia_valid &= NFS_VALID_ATTRS
   - 如果iattr->ia_valid中除了ATTR_FILE|ATTR_OPEN没有其他属性,直接退出
   - 如果是普通文件,把脏数据写回 
   > nfs_inode_dio_wait(inode)
   - 这里仅写回unstable和layout数据,metadata还是通过setattr写回
   > nfs_wb_all(inode)
   - 如果修改mode,uid,gid,释放delegation 
   > nfs_rpc_ops->return_delegation(inode)
   - 使用rpc设置attr 
   > nfs_rpc_ops->setattr(dentry, nfs_fattr, iattr)
   - 然后根据结果刷新nfs_inode 
   > nfs_refresh_inode(inode, nfs_fattr)

** nfs_vmtruncate(inode, offset)
   - 更新inode->i_size. 
   > i_size_write(inode, offset)
   - 释放vma, nonlinear等
   - 释放pagecache时,同时锁住PG_locked, 等待PG_wirteback, 相当于写操作
   - 调用address_space_operations->invaliatepage
   > truncate_pagecache(inode, oldsize, newsize)

** nfs_setattr_update_inode(inode, iattr)
   - 在setattr中,iattr的这些属性在rpc之后设置??
   - 如果iattr->ia_valid包含ATTR_MODE|ATTR_UID|ATTR_GID
   - 处理mode, uid, gid
   - 而且设置nfs_inode->cache_validity的NFS_INO_INVALID_ACCESS|NFS_INO_INVALID_ACL
   - 再处理ATTR_SIZE 
   > nfs_vmtruncate(inode, iattr->ia_size)

** kstat 
   #+begin_src 
	u64		ino;
	dev_t		dev;
	umode_t		mode;
	unsigned int	nlink;
	kuid_t		uid;
	kgid_t		gid;
	dev_t		rdev;
	loff_t		size;
	struct timespec  atime;
	struct timespec	mtime;
	struct timespec	ctime;
	unsigned long	blksize;
	unsigned long long	blocks;   
   #+end_src

** nfs_getattr(mnt, dentry, kstat)
   - 对于普通文件, 等待io完成 
   > nfs_inode_dio_wait(inode)
   > filemap_write_and_wait(inode->address_space)
   - 如果mount使用noatime,可以检查本地缓存的attr. 否则必须调用rpc 
   - vfsmount->mnt_flags有MNT_NOATIME, MNT_NODIRATIME
   - 如果不使用noatime
   > __nfs_revalidate_inode(nfs_server, inode)
   - 否则,检查本地缓存attr的有效性
   > nfs_revalidate_inode(nfs_server, inode)
   - 如果上面revalidate操作没问题,根据inode填充kstat 
   > generic_fillattr(inode, kstat)
   - ino是单独计算, 对于nfs来说,ino没有任何意义, 他只会使用fileid/nfsfh
   > nfs_compat_user_ino64(NFS_FILEID(inode))

** nfs_lock_context
   #+begin_src 
	atomic_t count;
	struct list_head list;
	struct nfs_open_context *open_context;
	struct nfs_lockowner lockowner;
	struct nfs_io_counter io_count;   
   #+end_src

** nfs_lockowner
   #+begin_src 
	fl_owner_t l_owner;	//他是files_struct指针
	pid_t l_pid;   
   #+end_src

** nfs_init_lock_context(nfs_lock_context)
   - 初始化nfs_lock_context->nfs_lockowner

** __nfs_find_lock_context(nfs_open_context)
   - 查找一个可用的nfs_lock_context.
   - 遍历nfs_open_context->list链表上的nfs_lock_context, 比较nfs_lockowner和current->files_struct / tgid
   - 如果找不到相同的,返回NULL

** nfs_get_lock_context(nfs_open_context)
   - 先查找可用的nfs_lock_context 
   > __nfs_find_lock_context(nfs_open_context)
   - 如果找不到,构造一个新的 
   > nfs_init_lock_context(nfs_lock_context)
   - nfs_lock_context和nfs_open_context什么关系? 还有nfs_lockowner

** nfs_put_lock_context(nfs_lock_context)
   - 释放nfs_lock_context->count技术, 如果减为0,释放nfs_lock_context 

** nfs_close_context(nfs_open_context, is_sync)
   - nfsv3/2使用的close操作, 用来更新metadata
   - 检查是否需要更新metadata
   - nfs_open_context->mode & FMOD_WRITE
   - is_sync ==1, 在direct-io时,is_sync=0, 不需要同步metadata, 直接返回
   - nfs_inode->open_files中还有nfs_open_context
   - mount使用cto, clos to open, 在close时刷新数据
   - 使用rpc更新attr
   > nfs_revalidate_inode(nfs_server, inode)

** alloc_nfs_open_context(dentry, fmode_t)
   - 构造一个nfs_open_context, 这里关联dentry
   > nfs_init_lock_context(nfs_open_context->nfs_lock_context)

** get_nfs_open_context(nfs_open_context)
   - 数据结构的核心是nfs_lock_context??
   - 增加使用计数 nfs_open_context->nfs_lock_context->count

** __put_nfs_open_context(nfs_open_context, is_sync)
   - 释放nfs_open_context,  nfs_open_context->nfs_lock_context->count --
   - 这里nfs_open_context->list可能在nfs_inode的链表中, 如果减为0,同时释放链表
   - 如果计数减为0, 释放nfs_open_context 
   - 对于nfsv4发送close操作, 对于nfsv2/3,就是更新attr
   > nfs_rpc_ops->close_context(nfs_open_context, is_sync)
   > dput(nfs_open_context->dentry)
   > nfs_sb_deactive(super_block)
   - 释放nfs_open_context

** put_nfs_open_context(nfs_open_context)
   - 异步释放
   > __put_nfs_open_context(nfs_open_context, 0)

** nfs_inode_attach_open_context(nfs_open_context)
   - nfs_open_context->dentry->inode
   - 把nfs_open_context->list放到nfs_inode->open_files队列中

** nfs_file_set_open_context(file, nfs_open_context)
   - 设置file->private_data = nfs_open_context 
   > get_nfs_open_context(nfs_open_context)
   > nfs_inode_attach_open_context(nfs_open_context)

** nfs_find_open_context(inode, rpc_cred, fmode_t)
   - nfs_open_context->rpc_cred为何和nfs_lockowner的放一块?
   - 这里只会比较nfs_open_context->rpc_cred/fmode_t 
   - 遍历nfs_inode->open_files链表,查找nfs_open_context

** nfs_file_clear_open_context(file)
   - 关闭nfs_open_context
   - 先释放nfs_open_context->list的链表
   > __put_nfs_open_context(nfs_open_context, file->f_flags & O_DIRECT?0:1)

** nfs_open(inode, file)
   - nfsv2/3使用的, 只是创建nfs_open_context

** nfs_release(inode, file)
   - nfsv2/3使用
   > nfs_file_clear_open_context(file)

** __nfs_revalidate_inode(nfs_server, inode)
   - 在metadata需要refresh时使用
   - 先检查inode是否有效 
   > is_bad_inode(inode)
   > NFS_STALE(inode)
   - 使用rpc获取数据 
   > nfs_rpc_ops->getattr(nfs_server, nfs_fh, nfs_fattr, label)
   - 更新inode  
   > nfs_refresh_inode(inode, nfs_fattr)
   - 如果nfs_inode->cache_validity 有 NFS_INO_INVALID_ACL, 释放acl 
   > nfs_zap_acl_cache(inode)
   - ATTR如果无效,必须通过rpc请求, acl无效,可以设置null, 使用时再去,pagecache应该同样
   
** nfs_attribute_timeout(inode)
   - 获取attribute是否有效
   > time_in_range_open(jiffies, nfs_inode->read_cache_jiffies, nfs_inode->read_cache_jiffies + attrtimeo)

** nfs_attribute_cache_expired(inode)
   - 如果有read的delegation, 而且nfs_inode->cache_validity没有NFS_INO_REVAL_FORCED
   > nfs_have_delegated_attributes(inode)
   - 否则检查时间 
   > nfs_attribute_timeout(inode)

** nfs_revalidate_inode(nfs_server, inode)
   - 先检查是否需要
   - nfs_inode->cache_validity没有NFS_INO_INVALID_ATTR, 可以考虑cache的 
   > nfs_attribute_cache_expired(inode)
   > __nfs_revalidate_inode(nfs_server, inode)

** nfs_invalidate_mapping(inode, address_space)
   - 只有pagecache有缓存时才写回数据
   > nfs_sync_mapping(address_space)
   > invalidate_inode_pages2(address_space)
   - 去掉nfs_inode->cache_validity的NFS_INO_INVALID_DATA
   - 这个代价很高!

** nfs_mapping_need_revalidate_inode(inode)
   - 是否需要重新获取缓存的数据
   - 如果有delegation, 不需要revalidate 
   > nfs_have_delegated_attributes(inode)
   - nfs_inode->cache_validity有NFS_INO_REVAL_PAGECACHE. PAGECACHE和DATA什么区别?
   - 或者timeout 
   > nfs_attribute_timeout(inode)

** nfs_revalidate_mapping(inode, address_space)
   - revalidate pagecache 
   - 检查是否需要revalidate metadata
   > nfs_mapping_need_revalidate_inode(inode)
   - 可能只有通过matadate,才能知道data是否有效.
   > __nfs_revalidate_inode(nfs_server, inode)
   - 总不能把数据读出来才知道!!
   - 如果有NFS_INO_INVALID_DATA, 释放pagecache
   > nfs_invalidate_mapping(inode, address_space)
   - NFS_INO_REVAL_PAGECACHE表示需要更新iattr
   - NFS_INO_INVALID_DATA表示释放pagecache,写回数据

** nfs_wcc_update_inode(inode, nfs_fattr)
   - 根据nfs_fattr更新inode. 
   - wcc是什么用?? 只有nfs_fattr->pre_*和inode的属性一致时,才更新inode
   - change, ctime, mtime都有对应的NFS_ATTR_FATTR_PRECTIME, NFS_ATTR_FATTR_CHANGE
   - change对应nfs_fattr->change_attr, i_version
   - 还有size 
   > i_size_write(inode, nfs_size_to_loff_t(nfs_fattr->size))
   - 如果nfs_inode->cache_validity有NFS_INO_INVALID_DATA, 释放fscache? 
   > nfs_fscache_invalidate(inode)
   - 如果更新inode的属性,返回NFS_INO_INVALID_ATTR,调用者会使用

** nfs_check_inode_attributes(inode, nfs_fattr)
   - 检查inode的属性和nfs_fattr是否一致? 更新nfs_inode->cache_validity
   - 如果有delegation, 不需要检查
   > nfs_have_delegated_attributes(inode)
   - 对于type/fileid, 如果不一致,返回-EIO
   - 对于i_version, nfs_fattr->valid有NFS_ATTR_FATTR_CHANGE, 比较i_version和change_attr
   - 如果不一致,设置NFS_INO_INVALID_ATTR|NFS_INO_REVAL_PAGECACHE
   - 对于mtime, 如果不一致, 设置NFS_INO_INVALID_ATTR
   - 对于size, 如果不一致, 设置NFS_INO_INVALID_ATTR|NFS_INO_REVAL_PAGECACHE
   - 对于mode/uid/gid, 设置NFS_ATTR_FATTR_ATTR|NFS_INO_INVALID_ACCESS|NFS_INO_INVALID_ACL
   - 对于nlink, 设置NFS_INO_INVALID_ATTR
   - 对于atime, 直射值NFS_INO_INVALID_ATIME
   - 然后根据上面的检查设置nfs_inode->cache_validate, 修改nfs_inode_jiffies = nfs_fattr->time_start

** nfs_ctime_need_update(inode, nfs_fattr)
   - 是否更新ctime
   - nfs_fattr->valid的NFS_ATTR_FATTR_CTIME, 表示nfs_fattr->ctime有效
   - 比较nfs_fattr->ctime, inode->i_ctime

** nfs_size_need_update(inode)
   - 使用NFS_ATTR_FATTR_SIZE 

** nfs_read_attr_generation_counter(void)
   - 全局计数nfs_attr_generation_counter 

** nfs_alloc_fattr()
   - 构造nfs_fattr 

** nfs_alloc_fhandle()
   - 构造nfs_fh 

** nfs_inode_attrs_need_uptodate(inode, nfs_fattr)
   - 检查nfs_fattr的信息是不是比inode/nfs_inode的更新
   - nfs_fattr->getcount > nfs_inode->attr_gencount
   - 比较ctime 
   > nfs_ctime_need_update(inode, nfs_fattr)
   - 比较size 
   > nfs_size_need_update(inode, nfs_fattr)
   - nfs_inode->attr_gencount > nfs_read_attr_generation_counter ??

** nfs_refresh_inode_locked(inode, nfs_fattr)
   - 如果nfs_fattr的信息有效,使用他更新inode
   > nfs_inode_attrs_need_uptodate(inode, nfs_fattr)
   > nfs_uptodate_inode(inode, nfs_fattr)
   - 否则用它更新nfs_inode->cache_validity
   > nfs_check_inode_attributes(inode, nfs_fattr)

** nfs_refresh_inode(inode, nfs_fattr)
   - 如果nfs_fattr->valid 没有NFS_ATTR_FATTR, 不再处理nfs_fattr
   - 这里锁住inode->i_lock, 更新nfs_inode
   > nfs_refresh_inode_locked(inode, nfs_fattr)
   - 使用rpc返回的nfs_fattr更新nfs_inode/inode, close/open/access/attr等操作都会使用

** nfs_post_op_update_inode_locked(inode, nfs_fattr)
   - 直接设置nfs_inode->cache_validity的NFS_INO_INVALID_ATTR和NFS_INO_REVAL_PAGECACHE
   - 对于dir文件, 设置NFS_INO_INVALID_DATA
   - 如果nfs_fattr->valid没有NFS_ATTR_FATTR, 直接退出
   - 更新nfs_inode 
   > nfs_refresh_inode_locked(inode, nfs_fattr)

** nfs_post_op_update_inode(inode, nfs_fattr)
   - 锁住inode->i_lock 
   > nfs_post_op_update_inode_locked(inode, nfs_fattr)
   - post op为何设置NFS_INO_INVALID_ATTR, NFS_INO_REVAL_PAGECACHE???
   - nfs_fattr必须包含有效信息???

** nfs_post_op_update_inode_force_wcc(inode, nfs_fattr)
   - 在写操作的回调中使用, 模仿标准的nfs_fattr,更新inode的metadata
   - 修改了metadata的文件操作之后使用. 设置cache的invalid标志, 使用返回的nfs_fattr更新inode
   - 这里使用inode->i_lock锁住inode
   - 如果nfs_fattr->valid没有NFS_ATTR_FATTR,或者nfs_fattr的数据没有inode新 
   > nfs_inode_attrs_need_update(inode, nfs_fattr)
   - 去掉nfs_fattr->valid的NFS_ATTR_FATTR_PRECHANGE,PRESIZE,PREMTIME,PRECTIME, pre_*的什么用??
   - 否则构造pre_*的信息
   - 如果nfs_fattr->valid有NFS_ATTR_FATTR_CHANGE, 设置NFS_ATTR_FATTR_PRECHANGE, pre_change_attr = inode->i_version
   - 如果nfs_fattr->valid有NFS_ATTR_FATTR_CTIME, 准备NFS_ATTR_FATTR_PRECTIME, pre_ctime
   - 还有mtime, size, 然后去更新inode 
   > nfs_post_op_update_inode_locked(inode, nfs_fattr)

** nfs_update_inode(inode, nfs_fattr)
   - 根据nfs_fattr更新inode/nfs_inode
   - 先检查nfs_fattr的fileid, type, 如果不一致, 标志inode的NFS_INO_STALE, 严重错误
   > nfs_invalidate_inode(inode)
   - 先处理fsid? 如果没有automount的标志,设置nfs_server->fsid = nfs_fattr->fsid??
   - 设置nfs_inode->read_cache_jiffies = nfs_fattr->time_start
   - 重新计算inode的属性, 更新cache_validity
   - 设置save_cache_validity = nfs_inode->cache_validity, 后面计算cache_validity时,可能需要集成它的属性
   - 先去掉nfs_inode->cache_validity的NFS_INO_INVALID_ATTR, NFS_INO_INVALID_ATIME, NFS_INO_REVAL_FORCED, NFS_INO_REVAL_PAGECACHE. 
   - 先更新nfs_inode的prechange, prectime, premtime, presize
   > nfs_wcc_update_inode(inode, nfs_fattr)
   - 使用上面返回的结果开始计算cache_validity
   - 处理change, 如果nfs_fattr->valid有NFS_ATTR_FATTR_CHANGE, 而且i_version != change_attr, 更新inode->i_version
   - invalid添加NFS_INO_INVALID_ATTR, DATA, ACCESS, ACL, NFS_INO_REVAL_PAGECACHE
   - 如果nfs_fattr中没有NFS_ATTR_FATTR_CHANGE, 如果nfs_server支持NFS_CAP_CHANGE_ATTR, 设置invalid |= save_cache_validity, 之前的所有invalid都需要保留
   - 处理mtime, 如果nfs_fattr->valid包括NFS_ATTR_FATTR_MTIME, 直接更新inode->mtime, 否则保留save_cache_validity的NFS_INO_INVALID_ATTR|NFS_INO_REVALID_FORCED
   - 同样是ctime, 这里是修复invalid,不会继承invalid.
   - 处理size, 如果nfs_fattr->valid有NFS_ATTR_FATTR_SIZE, 而且nfs_fattr->size != inode->i_size, 而且nfs_inode->npage ==0, 没有layout, 才能更新i_size
   - 设置inode->i_size, 以及NFS_INO_INVALID_ATTR和NFS_INO_INVALID_DATA
   - 否则设置invalid |= save_cache_validity & (NFS_INO_INVALID_ATTR和NFS_INO_REVAL_PAGECACHE,NFS_INO_REVAL_FORCED)
   - 处理atime, 如果nfs_fattr->valid有NFS_ATTR_FATTR_ATIME,直接设置inode->i_atime, 否则需要save_cache_validity的NFS_INO_INVALID_ATIME和NFS_INO_REVAL_FORCED
   - 处理mode, 如果不一致,添加NFS_INO_INVALID_ATTR和NFS_INO_INVALID_ACCESS和NFS_INO_INVALID_ACL
   - 否则继承save_cache_validity的NFS_INO_INVALID_ATTR和NFS_INO_INVALID_ACCESS和NFS_INO_INVALID_ACL, NFS_INO_REVAL_FORCED
   - 处理uid/gid和mode一样
   - 处理nlink, 如果不一致,设置invalid的NFS_INO_INVALID_ATTR, dir文件设置NFS_INO_INVALID_DATA, 设置inode->i_nlink
   - 否则继承save_cache_validity的NFS_INO_INVALID_ATTR和NFS_INO_REVAL_FORCED
   - 最后去掉invalid的NFS_INO_INVALID_ATTR? 上面为何还设置?
   - 根据invalid设置nfs_inode->cache_validity, 如果没有delegation, 或者以前有NFS_INO_REVAL_FORCED
   - 这里够复杂的,nfs_fattr数据结构复杂
   - 对于nfs_inode->cache_validity比较清晰,分成attr,data,atime,access,acl
   - NFS_INODE_REVAL_FORCED是必须更新attr,
   - NFS_INODE_INVALID_DATA根据version,size决定, 这里不会改变NFS_INO_REVAL_PAGECACHE

** nfs_alloc_inode(super_block)
   - 创建nfs_inode 

** nfs_i_callback(rcu_head)
   - 释放nfs_inode

** nfs_destory_inode(inode)
   > call_rcu(nfs_inode->i_rcu, nfs_i_callback)

** 总结
   - 这里首先实现super_operations的接口, drop_inode,clear_inode,evict_inode
   - 然后metadata, nfs_fattr, 主要是nfs_inode->cache_validity
   - 无效所有的cache, nfs_zap_caches, 设置cache_validity的所有标志, 在rpc失败时使用.
   - pagecache的数据使用NFS_INO_INVALID_DATA, 上面会释放所有的page
   - atime是在read/readdir之后无效,nfs的atime必须去server取
   - 在创建nfs_inode/inode时,使用nfs_fattr.根据它设置对应的属性,如果不提供,会设置NFS_INO_INVALID_ATTR等.
   - 在setattr/close/access等操作会返回nfs_fattr,根据他更新nfs_inode
   - getattr等更会更新..
   - write/open等操作在修改metadata后,也会返回nfs_fattr,修改nfs_inode,为何要设置NFS_INO_INVALID_PAGECACHE??
   - attr/lock操作前会写回所有数据,但好像包括metadata.
   - 对于NFS_INO_REVAL_PAGECACHE,用于检查是否获取revalidate inode, 在write/open之后设置.更新inode之后去掉
   - 对于NFS_INO_INVALID_DATA,在更新inode/nfs_inode时,如果i_size/i_version不一致设置,用来释放pagecache.释放pagecache后去掉.
   - 哪里会revalidate inode?? 一种是数据操作时,另一种应该是inode操作时
   - 在lock/seek/write中,如果用到size,更新文件属性. nfs_revalidate_file_size
   - 在读操作中,检查metadata和pagecache的数据有效性  nfs_revalidate_mapping

* nfs4super.c 

** nfs4_write_inode(inode, writeback_control)
   - super_operations->write_inode操作
   - 目的是写回metadata,在iput中使用
   - 写回commit的page
   > nfs_write_inode(inode, writeback_control)
   - 然后释放layout 
   - nfs_inode->flags有NFS_INO_LAYOUTCOMMIT
   > pnfs_layoutcommit_inode(inode, sync)

** nfs4_evict_inode(inode)
   - evict操作,开始释放inode 
   - 释放page
   > truncate_inode_pages(inode->address_space, 0)
   - 设置inode的I_CLEAR
   - 释放layout的资源 
   > pnfs_return_layout(inode)
   > pnfs_destroy_layout(nfs_inode)
   - 释放delegation 
   > nfs_inode_return_delegation_noreclaim(inode)
   - 释放nfs_inode的acl资源, access cache? fscache 
   > nfs_clear_inode(inode)

** 总结
   - 其他都是mount操作
