* pnfs_dev.c

** nfs4_deviceid
   #+begin_src 
	char data[NFS4_DEVICEID4_SIZE];
   #+end_src

** nfs4_deviceid_node
  #+begin_src 
	struct hlist_node		node;
	struct hlist_node		tmpnode;
	const struct pnfs_layoutdriver_type *ld; 
	const struct nfs_client		*nfs_client;
	unsigned long 			flags;
	unsigned long			timestamp_unavailable;
	struct nfs4_deviceid		deviceid;
	atomic_t			ref;
	//他表示ds节点？
  #+end_src


** _lookup_deviceid(pnfs_layoutdriver_type, nfs_client, nfs4_deviceid, hash)
   - nfs4_deviceid_node使用hash表管理, nfs4_deviceid_hash
   - 根据nfs4_deviceid / nfs_client / pnfs_layoutdriver_type 区别

** _find_get_deviceid(pnfs_layoutdriver_type
   > _lookup_deviceid(pnfs_layoutdriver_type, nfs_client, nfs4_deviceid, hash)
   - 使用rcu hash锁

** nfs4_find_get_deviceid(pnfs_layoutdriver_type, nfs_client, nfs4_deviceid)
   - 根据nfs4_deviceid计算hash
   > _find_get_deviceid(pnfs_layoutdriver_type, nfs_client, .)

** nfs4_delete_deviceid(pnfs_layoutdriver_type, nfs_client, nfs4_deviceid)
   - 都释放了,为何不直接操作?
   - 先找到nfs4_deviceid_node 
   > _lookup_deviceid(pnfs_layoutdriver_type, nfs_client, nfs4_deviceid, hash)
   - rcu hash表操作 
   > hlist_del_init_rcu(nfs4_deviceid->node)
   - 释放它的使用计数?  nfs4_deviceid_node->ref 
   > pnfs_layoutdriver_type->free_deviceid_node(nfs4_deviceid_node)

** nfs4_init_deviceid_node(nfs4_deviceid_node, pnfs_layoutdriver_type, nfs_client, nfs4_deviceid)
   - 初始化，关联数据结构 

** nfs4_insert_deviceid_node(nfs4_deviceid_node)
   - 创建新的nfs4_deviceid_node, 插入到hash表中
   - 先查找,是否有重复的
   > _find_get_deviceid(pnfs_layoutdriver_type, nfs_client
   
** nfs4_put_deviceid_node(nfs4_deviceid_node)
   - 直接释放,减小nfs4_deviceid_node->ref
   > nfs4_deviceid_node->pnfs_layoutdriver_type->free_deviceid_node(nfs4_deviceid_node)

** nfs4_mark_deviceid_unavailable(nfs4_deviceid_node)
   - 设置nfs4_deviceid_node->timestamp_unavailable = jiffies
   - flags的NFS_DEVICEID_UNAVAILABLE

** nfs4_test_deviceid_unavailable(nfs4_deviceid_node)
   - 检查nfs4_deviceid_node是否不可使用?
   - 首先nfs4_deviceid_node->flags有NFS_DEVICEID_UNAVAILABLE
   - 而且失
效时间不能太久?
   > jiffies - timestamp_unavailable < PNFS_DEVICE_RETRY_TIMEOUT
   - 否则,去掉NFS_DEVICEID_UNAVAILABLE??

** _deviceid_purge_client(nfs_client, hash)
   - 释放nfs_client关联的nfs4_deviceid_node

** nfs4_deviceid_purge_client(nfs_client)
   - 便利hash链表
   > _deviceid_purge_client(nfs_client, hash)

** nfs4_deviceid_mark_client_invalid(nfs_client)
   - 把nfs_client关联的nfs4_deviceid_node设为无效
   - 设置nfs4_deviceid_node->flags的NFS_DEVICEID_INVALID

* pnfs.c

** pnfs_layoutdriver_type 
   #+BEGIN_SRC 
	//表示layout解析驱动
	struct list_head pnfs_tblid;
	const u32 id;
	const char *name;
	struct module *owner;
	unsigned flags;

	int (*set_layoutdriver) (struct nfs_server *, const struct nfs_fh *);
	int (*clear_layoutdriver) (struct nfs_server *);

	struct pnfs_layout_hdr * (*alloc_layout_hdr) (struct inode *inode, gfp_t gfp_flags);
	void (*free_layout_hdr) (struct pnfs_layout_hdr *);

	struct pnfs_layout_segment * (*alloc_lseg) (struct pnfs_layout_hdr *layoutid, struct nfs4_layoutget_res *lgr, gfp_t gfp_flags);
	void (*free_lseg) (struct pnfs_layout_segment *lseg);

	/* test for nfs page cache coalescing */
	const struct nfs_pageio_ops *pg_read_ops;
	const struct nfs_pageio_ops *pg_write_ops;

	struct pnfs_ds_commit_info *(*get_ds_info) (struct inode *inode);
	void (*mark_request_commit) (struct nfs_page *req,
				     struct pnfs_layout_segment *lseg,
				     struct nfs_commit_info *cinfo);
	void (*clear_request_commit) (struct nfs_page *req,
				      struct nfs_commit_info *cinfo);
	int (*scan_commit_lists) (struct nfs_commit_info *cinfo,
				  int max);
	void (*recover_commit_reqs) (struct list_head *list,
				     struct nfs_commit_info *cinfo);
	int (*commit_pagelist)(struct inode *inode,
			       struct list_head *mds_pages,
			       int how,
			       struct nfs_commit_info *cinfo);

	/*
	 * Return PNFS_ATTEMPTED to indicate the layout code has attempted
	 * I/O, else return PNFS_NOT_ATTEMPTED to fall back to normal NFS
	 */
	enum pnfs_try_status (*read_pagelist) (struct nfs_read_data *nfs_data);
	enum pnfs_try_status (*write_pagelist) (struct nfs_write_data *nfs_data, int how);

	void (*free_deviceid_node) (struct nfs4_deviceid_node *);

	void (*encode_layoutreturn) (struct pnfs_layout_hdr *layoutid,
				     struct xdr_stream *xdr,
				     const struct nfs4_layoutreturn_args *args);

	void (*cleanup_layoutcommit) (struct nfs4_layoutcommit_data *data);

	void (*encode_layoutcommit) (struct pnfs_layout_hdr *layoutid,
				     struct xdr_stream *xdr,
				     const struct nfs4_layoutcommit_args *args);   
   #+END_SRC

** pnfs_layout_hdr
   #+begin_src 
	atomic_t		plh_refcount;
	struct list_head	plh_layouts;   /* other client layouts */
	struct list_head	plh_bulk_recall; /* clnt list of bulk recalls */
	struct list_head	plh_segs;      /* layout segments list */
	nfs4_stateid		plh_stateid;
	atomic_t		plh_outstanding; /* number of RPCs out */
	unsigned long		plh_block_lgets; /* block LAYOUTGET if >0 */
	u32			plh_barrier; /* ignore lower seqids */
	unsigned long		plh_retry_timestamp;
	unsigned long		plh_flags;
	loff_t			plh_lwb; /* last write byte for layoutcommit */
	struct rpc_cred		*plh_lc_cred; /* layoutcommit cred */
	struct inode		*plh_inode;
   #+end_src

** pnfs_device
   #+begin_src 
	struct nfs4_deviceid dev_id;
	unsigned int  layout_type;
	unsigned int  mincount;
	struct page **pages;
	unsigned int  pgbase;
	unsigned int  pglen;
   #+end_src

** pnfs_layout_segment
   #+begin_src
 	struct list_head pls_list;
	struct list_head pls_lc_list;
	struct pnfs_layout_range pls_range;
	atomic_t pls_refcount;
	unsigned long pls_flags;
	struct pnfs_layout_hdr *pls_layout;
   #+end_src

** pnfs_layout_range
   #+begin_src
 	u32 iomode;
	u64 offset;
	u64 length;
   #+end_src

** nfs4_pnfs_ds
   #+begin_src 
	struct list_head	ds_node;  /* nfs4_pnfs_dev_hlist dev_dslist */
	u32			ds_ip_addr;
	u32			ds_port;
	struct nfs_client	*ds_clp;
	atomic_t		ds_count;
	//仅仅包含ds的网络地址
   #+end_src

** nfs4_file_layout_dsaddr
   #+begin_src 
	struct nfs4_deviceid_node	id_node;
	unsigned long			flags;
	u32				stripe_count;
	u8				*stripe_indices;
	u32				ds_num;
	struct nfs4_pnfs_ds		*ds_list[1];
	//应该是layout所使用的数据地址信息.. GETDEVINFO..
   #+end_src

** nfs4_filelayout_segment
   #+begin_src 
	struct pnfs_layout_segment generic_hdr;
	u32 stripe_type;
	u32 commit_through_mds;
	u32 stripe_unit;
	u32 first_stripe_index;
	u64 pattern_offset;
	struct nfs4_file_layout_dsaddr *dsaddr; /* Point to GETDEVINFO data */
	unsigned int num_fh;
	struct nfs_fh **fh_array;
	// layout segment??
   #+end_src

** nfs4_filelayout
   #+begin_src 
	struct pnfs_layout_hdr generic_hdr;
	struct pnfs_ds_commit_info commit_info;
   #+end_src

** pnfs_commit_bucket
   #+begin_src 
	struct list_head written;
	struct list_head committing;
	struct pnfs_layout_segment *wlseg;
	struct pnfs_layout_segment *clseg;
	// commit使用的东西..??
   #+end_src

** pnfs_ds_commit_info
   #+begin_src 
	int nwritten;
	int ncommitting;
	int nbuckets;
	struct pnfs_commit_bucket *buckets;
   #+end_src

** find_pnfs_driver_locked(id)
   - id是pnfs_layoutdriver_type->id
   - 使用pnfs_modules_tbl管理pnfs_layoutdriver_type->pnfs_tblid
   - 查找pnfs_layoutdriver_type

** find_pnfs_driver(id)
   - 使用全局索pnfs_spinlock
   - 根据id查找pnfs_layoutdriver_type
   > find_pnfs_driver_locked(id)

** unset_pnfs_layoutdriver(nfs_server)
   - nfs_server->pnfs_curr_ld关联pnfs_layoutdriver_type
   - 释放对应的pnfs资源? 
   > pnfs_layoutdriver_type->clear_layoutdriver(nfs_server)
   - nfs_server->nfs_client->cl_mds_count表示什么资源? 释放mds? nfs_client应该是mds
   - 释放它使用的nfs4_deviceid_node, 看来nfs4_deviceid_node只是管理deviceid资源,而不能管理ds
   > nfs4_deviceid_purge_client(nfs_client)
   - 释放pnfs_layoutdriver_type 
   > module_put(pnfs_layoutdriver_type->owner)

** set_pnfs_layoutdriver(nfs_server, nfs_fh, id)
   - 设置nfs_server的pnfs资源
   - 检查nfs_server->nfs_client->cl_exchange_flags的EXCHGID4_FLAG_USE_NON_PNFS | EXCHGID4_FLAG_USE_NFS_MDS ?
   - 这里怎么是EXCHGID4_FLAG_USE_NON_PNFS??
   - 查找pnfs_layoutdriver_type 
   > find_pnfs_driver(id)
   - 如果找不到,查找驱动模块
   - 初始化使用nfs_fh? 
   > pnfs_layoutdriver_type->set_layoutdriver(nfs_server, nfs_fh)
   - 增加nfs_client->cl_mds_count
   - nfs_server->nfs_client应该是mds

** pnfs_register_layoutdriver(pnfs_layoutdriver_type)
   - 把pnfs_layoutdriver_type->pnfs_tblid放到pnfs_modules_tbl链表中 

** pnfs_unregister_layoutdriver(pnfs_layoutdriver_type)
   - 释放链表

** pnfs_get_layout_hdr(pnfs_layout_hdr)
   - 增加pnfs_layout_hdr->plh_refcount, 
   - 他管理inode的layout资源
   
** pnfs_alloc_layout_hdr(inode, gfp_flags)
   > nfs_client->pnfs_layoutdriver_type->alloc_layout_hdr(inode, gfp_flags)

** pnfs_free_layout_hdr(pnfs_layout_hdr)
   - pnfs_layout_hdr->plh_layouts在nfs_server->layouts
   - 释放这个链表 
   > put_rpccred(pnfs_layout_hdr->plh_lc_cred)

** pnfs_detach_layout_hdr(pnfs_layout_hdr)
   - 没有资源释放,直接设置nfs_inode->layout / write_io / read_io ?? 

** pnfs_put_layout_hdr(pnfs_layout_hdr)
   - 减小pnfs_layout_hdr->plh_refcount使用计数
   - 先释放nfs_inode   
   > pnfs_detach_layout_hdr(pnfs_layout_hdr)
   - 释放pnfs_layout_hdr, 使用回调函数
   > pnfs_free_layout_hdr(pnfs_layout_hdr)

** pnfs_iomode_to_fail_bit(iomode)
   - iomode只有3种, 错误有2种? 
   - IOMODE_RW/IOMODE_READ/IOMODE_ANY
   - NFS_LAYOUT_RO_FIALED / NFS_LAYOUT_RW_FAILED

** pnfs_layout_set_fail_bit(pnfs_layout_hdr, fail_bit)
   - 设置pnfs_layout_hdr->plh_retry_timestamp = jiffies 
   - 设置pnfs_layout_hdr->plh_flags的fail_bit
   - 如果原来没有,增加pnfs_layout_hdr->plh_refcount

** pnfs_layout_clear_fail_bit(pnfs_layout_hdr, fail_bit)
   - 清除pnfs_layout_hdr->plh_flags的fail_bit
   - 同时减小pnfs_layout_hdr->plh_refcount 

** pnfs_layout_io_set_failed(pnfs_layout_hdr, iomode)
   - 设置错误标志, 还要释放pnfs_layout_range资源 ?
   > pnfs_layout_set_fail_bit(pnfs_layout_hdr, pnfs_iomode_to_fail_bit(iomode)
   - 构造全局pnfs_layout_range, 用来获取目前所有的layout
   > pnfs_mark_matching_lsegs_invalid(pnfs_layout_hdr, list_head, pnfs_layout_range)
   - 释放他们  
   > pnfs_free_lseg_list(list_head)

** pnfs_layout_io_test_failed(pnfs_layout_hdr, iomode)
   - 检查pnsf_layout_hdr的有效性
   - 首先检查pnfs_layout_hdr->plh_flags的iomode对应的标志, 如果没有,直接返回
   - 否则检查失效时间, jiffies - pnfs_layout_hdr->plh_retry_timestamp < PNFS_LAYOUTGET_RETRY_TIMEOUT
   - 如果不久之前,去掉标志?? 而且不算失效

** init_lseg(pnfs_layout_hdr, pnfs_layout_segment)
   - pnfs_layout_segment表示pnfs_layout_range的资源
   - 初始化pnfs_layout_segment, 设置pnfs_layout_segment->pls_flags的NFS_LSEG_VALID

** pnfs_free_lseg(pnfs_layout_segment)
   - 释放回调函数 
   > pnfs_layoutdriver_type->free_lseg(pnfs_layout_segment)
   
** pnfs_layout_remove_lseg(pnfs_layout_hdr, pnfs_layout_segment)
   - 释放pnfs_layout_segment?
   - 首先是pnfs_layout_segment->pls_list链表,在pnfs_layout_hdr->segments中
   - 如果pnfs_layout_segment->plh_segs不在任何队列中,去掉NFS_LAYOUT_BULK_RECALL标志
   - 唤醒nfs_inode->roc_rpcwaitq???

** pnfs_put_lseg(pnfs_layout_segment)
   - 释放pnfs_layout_segment->pls_refcount
   - 如果计数减为0,开始释放关联的资源 
   > pnfs_layout_remove_lseg(pnfs_layout_hdr, pnfs_layout_segment)
   > pnfs_free_lseg(pnfs_layout_segment)

** pnfs_lseg_range_contained(pnfs_layout_range l1, pnfs_layout_range l2)
   - 检查l1是否完全覆盖l2, 而不只是交叉

** pnfs_lseg_range_intersecting(pnfs_layout_segment l1, l2)
   - l1和l2交叉

** should_free_lseg(pnfs_layout_range lseg_range, recall_range)
   - 要释放recall_range表示的资源
   - 检查lseg_range是否和它有关联?
   - 首先pnfs_layout_range->iomode相同,或recall_range->iomode == IOMODE_ANY
   - 然后range交叉 
   > pnfs_lseg_range_intersecting(lseg_range, recall_range)

** pnfs_lseg_dec_and_remove_zero(pnfs_layout_segment, list_head)
   - 释放pnfs_layout_segment的使用计数
   - 如果减为0, 放到list_head队列中,集中释放
   - 首先释放pnfs_layout_hdr的关系
   > pnfs_layout_remove_lseg(pnfs_layout_hdr, pnfs_layout_segment)

** mark_lseg_invalid(pnfs_layout_segment, list_head)
   - 设置pnfs_layout_segment为无效,而且直接释放 
   > test_and_clear_bit(NFS_LSEG_VALID, &lseg->pls_flags)
   > pnfs_lseg_dec_and_remove_zero(pnfs_layout_segment, tmp_list)

** pnfs_mark_matching_lsegs_invalid(pnfs_layout_hdr, list_head tmp_list, pnfs_layout_range recall_range)
   - 如果参数pnfs_layout_segment有效,释放和他重叠的pnfs_layout_segment
   - 如果无效,释放所有的pnfs_layout_segment
   - 遍历所有的pnfs_layout_segment, 如果有关系,就直接释放
   - 遍历pnfs_layout_hdr->plh_segs中的pnfs_layout_segment 
   - 检查是否应该释放
   > should_free_lseg(pnfs_layout_segment->pnfs_layout_range, recall_range)
   - 设置无效的标志, 如果是空闲的,直接释放
   - 如果还有使用的,就不会释放掉
   > mark_lseg_invalid(pnfs_layout_segment, tmp_list)

** pnfs_free_lseg_list(list_head)
   - 他已经释放和pnfs_layout_hdr/nfs_inode的关系
   > pnfs_free_lseg(pnfs_layout_segment)

** pnfs_destroy_layout(nfs_inode)
   - 首先增加pnfs_layout_hdr->plh_block_lgets ??
   - 首先释放所有的pnfs_layout_segment 
   > pnfs_mark_matching_lsegs_invalid(pnfs_layout_hdr, tmp_list, NULL)
   > pnfs_free_lseg_list(tmp_list)
   - 然后去掉pnfs_layout_hdr->plh_flags的标志, NFS_LAYOUT_RO_FAILED | NFS_LAYOUT_RW_FAILED??
   - 修改时增减pnfs_layout_hdr->plh_refcount 

** pnfs_layout_and_bulk_destroy_list(inode, list_head)
   - 把pnfs_layout_hdr->plh_bulk_destroy放到list_head中
   - 要释放pnfs_layout_hdr?? 

** pnfs_layout_bulk_destroy_byserver_locked(nfs_client, nfs_server, list_head)
   - pnfs_layout_hdr->layouts在nfs_server->layouts中
   - 遍历pnfs_layout_hdr, 收集到list_head中 
   > pnfs_layout_add_bulk_destroy_list(inode, list_head)
   - 使用inode的计数保护

** pnfs_layout_free_bulk_destroy_list(list_head, is_bulk_recall)
   - 释放上面收集的pnfs_layout_hdr
   - 构造一个覆盖全文件的pnfs_layout_range, 用来收集pnfs_layout_segment 
   - 遍历pnfs_layout_hdr
   - 如果is_bulk_recall!=0, 设置pnfs_layout_hdr->plh_flags的NFS_LAYOUT_BULK_RECALL
   - 收集所有的pnfs_layout_range
   > pnfs_mark_matching_lsegs_invalid(pnfs_layout_hdr, list_head, pnfs_layout_range)
   - 集中释放 
   > pnfs_free_lseg_list(list_head)
   - 释放inode / pnfs_layout_hdr 
   > pnfs_put_layout_hdr(pnfs_layout_hdr)
   > iput(inode)

** pnfs_destroy_layouts_byfsid(nfs_client, nfs_fsid, is_recall)
   - fsid应该对应一个nfs_server?
   - 遍历nfs_client->cl_superblocks链表上的nfs_server
   - 如果nfs_server->fsid符合, 处理他的pnfs_layout_hdr
   > pnfs_layout_bulk_destroy_byserver_locked(nfs_client, nfs_server, list_head)
   - 最后集中释放pnfs_layout_hdr 
   > pnfs_layout_free_bulk_destroy_list(list_head, is_recall)

** pnfs_destroy_layouts_byclid(nfs_client, is_recall)
   - 释放nfs_client所有的nfs_server的pnfs资源 
   > pnfs_layout_bulk_destroy_byserver_locked(nfs_client, nfs_server, list_head)
   > pnfs_layout_free_bulk_destroy_list(list_head, is_recall)

** pnfs_destroy_all_alyouts(nfs_client)
   - 先标记nfs_client使用的nfs4_deviceid_node
   > nfs4_deviceid_mark_client_invalid(clp)
   - nfs_client是mds?
   - 释放他关联的nfs4_deviceid_node
   - 释放操作好像没有使用flags的标记, 谁使用了?
   > nfs4_deviceid_purge_client(clp)
   - 释放使用的pnfs_layout_hdr
   > pnfs_destroy_layouts_byclid(clp, false)

** pnfs_set_layout_stateid(pnfs_layout_hdr, nfs4_stateid, update_barrier)
   - 比较nfs4_stateid->seqid
   - 如果参数的seqid大, 或者pnfs_layout_hdr空闲, 更新stateid
   - pnfs_layout_hdr->plh_segs没有pnfs_layout_segment
   - 把nfs4_stateid给pnfs_layout_hdr->plh_stateid
   - update_barrier是设置pnfs_layout_hdr->plh_barrier = nfs4_stateid->seqid??

** pnfs_layout_stateid_blocked(pnfs_layout_hdr, nfs4_stateid)
   - blocked? 
   - 如果nfs4_stateid->seqid小,就是blocked?
   > pnfs_seqid_is_newer(seqid, lo->plh_barrier)

** pnfs_layoutgets_blocked(pnfs_layout_hdr, lget)
   - block layoutget? 在send_layoutget请求中使用
   - 如果pnfs_layout_hdr->plh_block_lgets !=0, 是blocked ?
   - 如果pnfs_layout_hdr->plh_flags有NFS_LAYOUT_BULK_RECALL， 也是blocked ?
   - 如果pnfs_layout_hdr->plh_outstanding > lget, 而且没有pnfs_layout_segment, 也是blocked ? 

** pnfs_choose_layoutget_stateid(nfs4_stateid, pnfs_layout_hdr, nfs4_state)
   - 准备layoutget请求,使用的nfs4_stateid
   - 检查blocked? 
   > pnfs_layoutgets_blocked(pnfs_layout_hdr, 1)
   - 然后检查open stateid, 也就是nfs4_state
   > nfs4_valid_open_stateid(nfs4_state)
   - 如果pnfs_layout_hdr->plh_segs为空,也就是空闲的, 使用nfs4_state的 
   > nfs4_stateid_copy(nfs4_stateid, nfs4_state->stateid)
   - 否则使用pnfs_layout_hdr->plh_stateid

** nfs4_layoutget_args 
   #+BEGIN_SRC 
	struct nfs4_sequence_args seq_args;
	__u32 type;
	struct pnfs_layout_range range;
	__u64 minlength;
	__u32 maxcount;
	struct inode *inode;
	struct nfs_open_context *ctx;
	nfs4_stateid stateid;
	unsigned long timestamp;
	struct nfs4_layoutdriver_data layout;   
   #+END_SRC

** nfs4_layoutget_res 
   #+BEGIN_SRC 
	struct nfs4_sequence_res seq_res;
	__u32 return_on_close;
	struct pnfs_layout_range range;
	__u32 type;
	nfs4_stateid stateid;
	struct nfs4_layoutdriver_data *layoutp;   
   #+END_SRC

** nfs4_layoutget 
   #+BEGIN_SRC 
	struct nfs4_layoutget_args args;
	struct nfs4_layoutget_res res;
	struct rpc_cred *cred;
	gfp_t gfp_flags;   
   #+END_SRC

** send_layoutget(pnfs_layout_hdr, nfs_open_context, pnfs_layout_range, gfp_flags)
   - layoutget请求, 构造nfs4_layoutget
   - 初始化nfs4_layoutget->nfs4_layoutget_args
   - 设置range, minlength = 4096, maxcount = 4096, nfs_open_context / inode
   - nfs4_layoutget_args->type = nfs_client->pnfs_layoutdriver_type->id
   - rpc_cred = pnfs_layout_hdr->plh_lc_cred??
   - 发送请求 
   > nfs4_proc_layoutget(nfs4_layoutget, gfp_flags)
   - 如果失败,设置pnfs_layout_hdr->plh_flags的fail_bit

** 总结
   -发送请求在nfs4proc.c中, 使用回调函数使用这里的操作

   - 在prepare阶段, 设置sequence/nfs4_slot, stateid
   > nfs4_layoutget_prepare
   > pnfs_choose_layoutget_stateid(nfs4_layoutget_args->stateid, nfs_inode->pnfs_layout_hdr, nfs_open_context->nfs4_state)

   - 在done阶段, 处理sequence结果, 处理错误
   > nfs_async_handle_error(rpc_task, nfs_server, nfs4_state)

   - 在release中,释放nfs4_slot, 其他资源
   
   - 最后调用者解析nfs4_layoutget中获取的数据
   > pnfs_layout_process(nfs4_layoutget)

** pnfs_clear_layoutcommit(inode, list_head)
   - 去掉nfs_inode->flags的NFS_INO_LAYOUTCOMMIT
   - 如果原来没有,直接退出
   - 遍历nfs_inode->pnfs_layout_hdr中的pnfs_layout_segment
   - 去掉pnfs_layout_segment->pls_flags的NFS_LSEG_LAYOUTCOMMIT
   - 如果原来有,还要释放pnfs_layout_segment
   - 先释放他和pnfs_layout_hdr的关系
   > pnfs_lseg_dec_and_remove_zero(pnfs_layout_segment, list_head)

** _pnfs_return_layout(inode)
   - 释放nfs_inode->pnfs_layout_hdr
   - 首先释放所有的pnfs_layout_segment
   - 先释放NFS_LSEG_LAYOUTCOMMIT的
   > pnfs_clear_layoutcommit(inode, list_head)
   - 再释放NFS_LSEG_VALID的
   > pnfs_mark_matching_lsegs_invalid(pnfs_layout_hdr, list_head, NULL)
   - 这里不仅是收集到list_head中,还要针对标志,释放使用计数
   - pnfs_free_lseg_list(list_head)
   - 构造pnfs_layoutreturn结构, 发送请求 
   > nfs4_proc_layoutreturn(nfs4_layoutreturn)
   - 这里归还的是整个pnfs_layout_hdr, 而不是pnfs_layout_segment!!

** pnfs_commit_and_return_layout(inode)
   - 要释放commit的数据?
   - 首先阻止layoutget操作? 设置pnfs_layout_hdr->plh_block_lgets ++ 
   - 等待数据写回
   > filemap_fdatawait(inode->address_space)
   - commit layout? 
   > pnfs_layoutcommit_inode(inode, true)
   - 然后return layout? 
   > _pnfs_return_layout(inode)
   - 最后设置pnfs_layout_hdr->plh_block_lgets

** pnfs_roc(inode)
   - roc应该是return on close
   - 如果pnfs_layout_hdr->plh_flags有NFS_LAYOUT_BULK_RECALL，不用处理??
   - 如果pnfs_layout_hdr->plh_flags没有NFS_LAYOUT_ROC, 不用处理
   - 遍历pnfs_layout_hdr->plh_segs中的pnfs_layout_segment
   - 收集有NFS_LSEG_ROC的pnfs_layout_segment 
   > mark_lseg_invalid(pnfs_layout_segment, list_head)
   - 释放他们
   > pnfs_free_lseg_list(list_head)
   - 同时设置pnfs_layout_hdr->plh_block_lgets, 需要return layout?

** pnfs_roc_release(inode)
   - 在close操作完成后,释放对应的roc数据
   - 设置pnfs_layout_hdr->plh_block_lgets --
   - 释放pnfs_layout_hdr->plh_refcount -- 
   - 如果减为0， 完全释放, 关联的nfs_inode
   > pnfs_detach_layout_hdr(pnfs_layout_hdr)
   > pnfs_free_layout_hdr(pnfs_layout_hdr)

   - 在close rpc发送之前, 为何在这里?
   - 检查是否需要roc 
   > pnfs_roc(inode)
   - 在close完成之后,再释放pnfs_layout_hdr的资源
   > pnfs_roc_release(inode)

** pnfs_roc_set_barrier(inode, barrier)
   - 设置pnfs_layout_hdr->plh_barrier
   > pnfs_seqid_is_newer(barrier, pnfs_layout_hdr->plh_barrier

** pnfs_roc_drain(inode, barrier, rpc_task)
   - 对于roc, 在发送close之前, 需要释放layout
   - 在close请求的rpc_callback_prepare回调中使用它
   - 所以如果还有pnfs_layout_segment, 带有NFS_LSEG_ROC, rpc_task需要等待 
   > rpc_sleep_on(&NFS_SERVER(ino)->roc_rpcwaitq, task, NULL)
   - 在释放pnfs_layout_segment时,会唤醒它
   - 否则,获取barrier 
   - pnfs_layout_hdr->nfs4_stateid->seqid + pnfs_layout_hdr->plh_outstanding

** pnfs_lseg_range_cmp(pnfs_layout_range l1, pnfs_layout_range l2)
   - 先比较offset, 然后是length, 然后是iomode
   - IOMODE_READ > IOMODE_WRITE

** pnfs_layout_insert_lseg(pnfs_layout_hdr, pnfs_layout_segment)
   - 把pnfs_layout_segment放到pnfs_layout_hdr->plh_segs链表中
   - 链表是有序的,使用上面的比较函数决定顺序

** alloc_init_layout_hdr(inode, nfs_open_context, gfp_t)
   - 分配新的pnfs_layout_hdr 
   > pnfs_alloc_layout_hdr(inode, gfp_flags)
   - 初始化链表 / inode/ rpc_cred
   - rpc_cred来自nfs_open_context

** pnfs_find_alloc_layout(inode, nfs_open_context, gfp_flags)
   - 先检查nfs_inode->layout是否有效, 无效再创建 
   > alloc_init_layout_hdr(inode, nfs_open_context, gfp_flags)

** iomode 
   #+BEGIN_SRC 
iomode是要查找的io参数
lseg是已经存在的pnfs_layout_segment
 * iomode matching rules:
 * iomode	lseg	match
 * -----	-----	-----
 * ANY		READ	true
 * ANY		RW	true
 * RW		READ	false
 * RW		RW	true
 * READ		READ	true
 * READ		RW	true    
   #+END_SRC

** pnfs_lseg_range_match(pnfs_layout_range ls_range, range)
   - 检查ls_range是否满足range的io要求
   - 如果range->iomode == IOMODE_RW, ls_range->iomode是IOMODE_RW, 不满足
   - 如果位置不交叉,也不满足
   > pnfs_lseg_range_intersecting(ls_range, range)
   - 如果上面2个条件满足, 检查ls_range是否覆盖range->offset, 这里不要求全部覆盖range
   > pnfs_lseg_range_contained(ls_range, range1)

** pnfs_find_lseg(pnfs_layout_hdr, pnfs_layout_range )
   - 遍历pnfs_layout_hdr->plh_segs中的pnfs_layout_segment
   - 是否满足pnfs_layout_range要求 
   - 过滤掉没有NFS_LSEG_VALID的pnfs_layout_segment 
   > pnfs_lseg_range_match(pnfs_layout_segment->pnfs_layout_range, pnfs_layout_range)

** nfs4_threshold
   #+BEGIN_SRC 
	__u32	bm;
	__u32	l_type;
	__u64	rd_sz;
	__u64	wr_sz;
	__u64	rd_io_sz;
	__u64	wr_io_sz;   
   #+END_SRC

** pnfs_within_mdsthershold(nfs_open_context, inode, iomode)
   - 检查io应该使用mds,还是使用pnfs
   - 比较i_size, io_size, nfs4_threshold
   - io_size是nfs_inode->read_io/write_io, 应该是rsize/wsize
   - 如果iomode是IOMODE_READ, 表示对read有限制
   - 如果nfs4_threshold->bm有THRESHOLD_RD,比较fsize < nfs4_threshold->rd_sz
   - 如果bm有THRESHOLD_RD_IO, 比较read_io < nfs4_threshold->rd_io_sz
   - 如果iomode是IOMODE_RW, 表示对write有限制
   - 如果bm有THRESHOLD_WR, 比较fsize < nfs4_threshold->wr_sz
   - 如果bm有THRESHOLD_WR_IO, write_io < nfs4_threshold->wr_io_sz

** pnfs_update_layout(inode, nfs_open_context, pos, count, pnfs_iomode, gfp_flags)
   - 检查nfs_client是否使用pnfs
   > nfs_client->pnfs_layoutdriver_type
   - 检查io是否应该使用pnfs 
   > pnfs_within_mdsthershold(nfs_open_context, inode, iomode)
   - 准备nfs_inode->pnfs_layout_hdr
   > pnfs_find_alloc_layout(inode, nfs_open_context, gfp_flags)
   - 如果pnfs_layout_hdr->plh_flags有NFS_LAYOUT_BULK_RECALL, 不能使用
   - 检查layout是否失效
   - 即使有io_fail_bit, 但是不久之前设置,可以重新尝试
   > pnfs_layout_io_test_failed(pnfs_layout_hdr, iomode)
   - 查找已有的pnfs_layout_segment, 根据(iomode, pos, count)查找
   > pnfs_find_lseg(pnfs_layout_hdr, pnfs_layout_range)
   - 如果找到,直接退出
   - 否则需要发送layoutget请求
   - 修改pnfs_layout_hdr->plh_outstanding, 表示在处理的layoutget请求个数?
   - 如果layout blocked, 也不能使用? 
   > pnfs_layoutgets_blocked(pnfs_layout_hdr, 0)
   - 发送rpc请求 
   > send_layoutget(pnfs_layout_hdr, nfs_open_context, pnfs_layout_range, gfp_flags)
   - 最后减小pnfs_layout_hdr->plh_outstanding

** pnfs_layout_process(nfs4_layoutget)
   - 根据rpc返回的结果,获取pnfs_layout_segment
   - 创建pnfs_layout_segment, 创建一个? 
   > nfs_client->pnfs_layoutdriver_type->alloc_lseg(pnfs_layout_hdr, nfs4_layoutget_res, gfp_flags)
   - 再次检查pnfs_layout_hdr->plh_flags的NFS_LAYOUT_BULK_RECALL
   - layoutget blocked?? 
   > pnfs_layoutgets_blocked(pnfs_layout_hdr, 1)
   > pnfs_layout_stateid_blocked(pnfs_layout_hdr, nfs4_stateid)
   - 更新pnfs_layout_hdr的nfs4_stateid 
   > pnfs_set_layout_stateid(pnfs_layout_hdr, nfs4_stateid, false)
   - 初始化pnfs_layout_segment 
   > init_lseg(pnfs_layout_hdr, pnfs_layout_segment)
   - 把pnfs_layout_segment放到pnfs_layout_hdr->plh_segs链表中 
   > pnfs_layout_insert_lseg(pnfs_layout_hdr, pnfs_layout_segment)
   - 如果nfs4_layoutget_res->return_on_close !=0, 设置pnfs_layout_segment->pls_flags的NFS_LSEG_ROC, 设置pnfs_layout_hdr->plh_flags的NFS_LAYOUT_ROC

** pnfs_generic_pg_init_read(nfs_pageio_descriptor, nfs_page)
   - 为read操作准备nfs_pageio_descriptor
   - 如果nfs_pageio_descriptor->wb_offset != wb_pgbase, 不使用pnfs 
   - 重新设置nfs_pageio_descriptor->nfs_pageio_ops, 提交io的方式使用普通的nfs操作
   > nfs_pageio_reset_read_mds(nfs_pageio_descriptor)
   - 创建nfs_pageio_descriptor使用的pnfs_layout_segment 
   > pnfs_update_layout(inode, nfs_open_context, offset, rd_size, IOMODE_READ, GFP_KERNEL)
   - 如果获取失败, 重置nfs_pageio_ops等 
   > nfs_pageio_reset_read_mds(nfs_pageio_descriptor)
   - 这里单独处理了direct-io??

** pnfs_generic_pg_init_write(nfs_pageio_descriptor, nfs_page, wb_size)
   - 和上面一样
   > pnfs_update_layout(inode, nfs_open_context, offset, wb_size, IOMODE_RW, GFP_NOFS)

** pnfs_pageio_init_read(nfs_pgeio_descriptor, inode, nfs_pgio_completion_ops)
   - 初始化nfs_pageio_descriptor
   - nfs_pageio_completion_ops应该是通用的, nfs_async_read_completion_ops

** pnfs_pageio_init_write(nfs_pageio_descriptor, inode, ioflags, nfs_pgio_completion_ops)
   - 和上面一样, 回调函数指针是nfs_async_write_completion_ops

** pnfs_generic_pg_test(nfs_pageio_descriptor, nfs_page prev, nfs_page req)
   - 检查nfs_page是否能合并提交
   - nfs_page的范围在pnfs_layout_segment内 
   - 范围是nfs_pageio_descriptor->pnfs_layout_hdr->pls_range

** pnfs_write_done_resend_to_mds(inode, list_head, nfs_pgio_completion_ops, nfs_direct_req)
   - 重新发送write请求,使用普通方式
   - 创建nfs_pageio_descriptor
   > nfs_pageio_init_write(nfs_pageio_descriptor, inode, FLUSH_STABLE, nfs_pgio_completion_ops)
   - 处理list_head中的nfs_page
   > nfs_pageio_add_request(nfs_pageio_descriptor, nfs_page)
   - 发送rpc请求 ?? 
   > nfs_pageio_completion(nfs_pageio_descriptor)

** pnfs_ld_handle_write_error(nfs_write_data)
   - 处理write的错误
   - 如果nfs_server->pnfs_layoutdriver_type->flags有PNFS_LAYOUT_ON_ERROR, 严重错误? 
   - return layout 
   > pnfs_return_layout(nfs_pgio_header->inode)
   - 设置nfs_pgio_header->flags的NFS_IOHDR_REDO
   - 如果之前没有标志,可以再次读数据
   > pnfs_write_done_resend_to_mds(inode, list_head, nfs_pgio_header->completion_ops, nfs_direct_req)

** pnfs_ld_write_done(nfs_write_data)
   - object layout使用的函数?
   - 这应该是rpc的回调函数 
   - 如果nfs_pgio_header->pnfs_error == 0, rpc没有问题
   - pnfs_set_layoutcommit(nfs_pgio_header)
   - 这里把一个rpc请求分解了?
   > nfs_pgio_header->mds_ops->rpc_call_done(nfs_write_data->rpc_task, nfs_write_data)
   - 如果有错误 
   > pnfs_ld_handle_write_error(nfs_write_data)
   - 释放nfs_write_data 
   > nfs_pgio_header->mds_ops->rpc_release(nfs_write_data)

** pnfs_write_through_mds(nfs_pgio_descriptor, nfs_write_data)
   - 


** GETDEVICEINFO, 根据deviceid4获取一个关于网络地址的2维队列. 
   device_addr4
   layouttype4  da_layout_type
   opaque     da_addr_body<>   

   da_addr_body的结构是
   nfsv4_1_file_layout_ds_addr4
    uint32_t  nflda_stripe_indices<>  数组大小就是stripe count
    multipath_list4 nflda_multipath_ds_list<>  这是二维数组,第一维是数据分布，第二维是数据分发备份.


** LAYOUTGET, 根据一些访问信息(layout_type,file,clientid,stateid,iomode,offset,length),获取layout的信息,虽然也返回stateid,但它会更新client已经获取的layout的stateid.  这里返回的是一串layout4,也就是说一个文件可以有多个layout4.

layout4
  offset4
  length4
  layoutiomode4
  layout_content4 lo_content
    layouttype4 loc_type
    opaque loc_body

loc_body的结构是: nfsv4_1_file_layout4
  deviceid4 nfl_deviceid
  nfl_util4 nfl_util   #unit size
  uint32_t  nfl_first_stripe_index  
  offset4   nfl_pattern_offset
  nfs_fh4   nfl_fh_list<>  #这里表示每个服务器上存储文件
  
从上面看来，还是很灵活的数据结构.


nfsv4_1_file_layout4

nfsv4_1_file_layout_ds_addr4

        //地址内容为tcp 和 ipv4/6
        struct netaddr4 {
                /* see struct rpcb in RFC 1833 */
                string na_r_netid<>; /* network id */
                string na_r_addr<>;  /* universal address */
        };

        typedef netaddr4 multipath_list4<>;

        /*
         * Encoded in the da_addr_body field of
         * data type device_addr4:
         */
********struct nfsv4_1_file_layout_ds_addr4 {
                //应该时一个strip中，每个unit对应的server在ds_list中的索引
                uint32_t        nflda_stripe_indices<>;
                //一系列data server的网络地址
                multipath_list4 nflda_multipath_ds_list<>;
        };

        //用于GETDEVICEINFO操作，获得nfs4_1_file_layout_ds_addr4
        const NFS4_DEVICEID4_SIZE = 16;
        typedef opaque  deviceid4[NFS4_DEVICEID4_SIZE];

        //表示一个layout
********struct nfsv4_1_file_layout4 {
            deviceid4      nfl_deviceid;
            //NFL4_UFLG_DENSE,NFL4_UFLG_COMMIT_THRU_MDS, stripe unit size
            nfl_util4      nfl_util;
            //strip中的unit从此开始计数
            uint32_t       nfl_first_stripe_index;
            offset4        nfl_pattern_offset;
            //file handle for data server in nflda_multipath_ds_list
            nfs_fh4        nfl_fh_list<>;
        };

        使用这两个数据结构，可决定访问某个unit的数据使用的data server地址和filehandler.



