* xfs_sb.c
  - 操作xfs_sb使用

** xfs_perag_get(xfs_mount, xfs_agnumber_t)
   - 根据agno查找xfs_perag, xfs_mount->m_perag_tree管理所有的
   > radix_tree_lookup(xfs_mount->m_perag_tree, agno)

** xfs_perag_get_tag(xfs_mount, xfs_agnumber_t first, tag)
   - 查找带有tag标志的xfs_perag, 从first开始 
   > xfs_tree_gang_lookup_tag(xfs_mount->m_perag_tree, xfs_perag, first, 1, tag)

** xfs_perag_put(xfs_perag)
   - 只是减小xfs_perag->pag_ref计数

** xfs_mount_validate_sb(xfs_mount, xfs_sb, check_inprogress, check_version)
   - xfs_sb使用的数据类型是本地cpu的
   - 检测magic, version, 各种feature
   - xfs_sb->sb_logstart ==0表示使用外部设备作为log, 否则不使用外部设备
   - 然后检查sectsize,sectlog,blocksize,blocklog,inodesize等
   - check_inprogress ==1表示xfs_sb在第一个AG中,也就是磁盘开头,xfs_sb->sb_inprogress必须为0

** xfs_sb_from_disk(xfs_sb, xfs_dsb_t)
   - 把磁盘数据类型xfs_dsb转换为内存中的xfs_sb

** xfs_sb_to_disk(xfs_dsb , xfs_sb, fields)
   - 根据fieds,把xfs_sb的成员给xfs_dsb
   - 根据成员大小,做数据类型转换

** xfs_sb_verify(xfs_buf, check_version)
   - xfs_buf中是xfs_dsb, 转为xfs_sb 
   > xfs_sb_from_disk(..)
   - 验证xfs_sb是否有效
   > xfs_mount_validate_sb(xfs_mount,x fs_sb, xfs_buf->bn == XFS_SB_DADDR, check_version)

** xfs_sb_read_verify(xfs_buf)
   - 如果xfs版本只是crc,先校验 
   > xfs_verify_cksum(xfs_buf->b_addr, xfs_dsb->sb_sectsize)
   - 检查xfs_sb成员 
   > xfs_sb_verify(xfs_buf, true)

** xfs_sb_quiet_read_verify(xfs_buf)
   - 检查xfs_buf中是否有xfs_sb?
   > xfs_sb_read_verify(xfs_buf)
   - 如果不是,通过IO错误返回? 
   > xfs_buf_ioerror(xfs_buf, EWRONGFS)

** xfs_sb_write_verify(xfs_buf)
   - 写之前的进行校验? 
   > xfs_sb_verify(xfs_buf, false)
   - 如果xfs版本支持crc
   > xfs_update_cksum(xfs_buf->b_addr, BBTOB(xfs_buf->b_length, crc)

** xfs_buf_ops xfs_sb_buf_ops

** xfs_sb_mount_common(xfs_mount, xfs_sb)
   - 根据xfs_sb初始化xfs_mount

** xfs_initialize_perag_data(xfs_mount, xfs_agnumber_t)
   - 读取磁盘的所有AG 
   - 读取xfs_agf 
   > xfs_alloc_pagf_init(xfs_mount, NULL, index, 0)
   - 读取xfs_agi 
   > xfs_ialloc_pagi_init(xfs_mount, NULL, index)
   - 然后统计xfs_agi的freecount, count, xfs_agf的freeblks, , flcount, btreeblks
   - xfs_agi/xfs_agf都是磁盘数据类型,他们把数据转到xfs_perag中
   - 把统计数据给xfs_sb, 然后设置cpu-cpu变量
   > xfs_icsb_reinit_counters(xfs_mount)

** xfs_mod_sb(xfs_trans, fields)
   - 把xfs_sb的数据写回磁盘中的xfs_dsb, 并且log对应的block/xfs_buf
   - 获取xfs_trans对应的xfs_sb, 也就是xfs_mount->m_sb_bp
   - 如果xfs_trans !=0, 需要把xfs_buf放到xfs_trans中
   - xfs_buf可能正在使用参数的xfs_trans, 不需要join操作
   > xfs_trans_getsb(xfs_trans, xfs_mount, flags)
   - 把数据给xfs_dsb 
   > xfs_sb_to_disk(xfs_dsb, xfs_sb, fields)
   - 然后计算fields对应的磁盘空间 
   > xfs_trans_buf_set_type(xfs_trans, xfs_buf, XFS_BLFT_SB_BUF)
   > xfs_trans_log_buf(xfs_trans, xfs_buf, first, last)

* xfs_super.c
** mount-option
   - 省略mount option

** xfs_max_file_offset(blockshift)
   - 计算最大的文件长度, 在64位系统中, 1^63 - 1

** xfs_set_inode32(xfs_mount)
   - xfs_mount->m_maxicount表示inode的上限?
   - 如果m_maxicount !=0, 需要计算可分配inode的AG的数量
   - xfs_sb->sb_dblocks * xfs_sb->sb_imax_pct表示metadata的空间 icount
   - icount /= 100, icount / xfs_sb->sb_agblocks
   - 计算之后获取max_metadata
   - 遍历xfs_mount的所有xfs_perag
   - 如果agno太大,不适合32位的ino
   - 计算AG的最大ino
   > XFS_AGINO_TO_INO(xfs_mount, index, agino)
   - 如果ino > XFS_MAXINUMBER_32, 这个AG不能作为inode/meta
   - 设置xfs_perag->pagi_inodeok = pagf_metadata = 0
   - 否则设置page_inodeok = 1, 如果它超过上面计算的max_metadata, 设置pagf_metadata = 1
   - 有些AG可以保存xfs_dinode, 但不能用于其他metadata?
   - 最后设置xfs_mount->m_flags的XFS_MOUNT_32BITINODES | XFS_MOUNT_SMALL_INUMS

** xfs_set_inode64(xfs_mount)
   - 遍历所有的xfs_perag
   - 设置xfs_perag->pagi_inodeok = 1, pagf_metadata = 0
   - pagf_metadata =1时会拒绝文件数据的分配, 所以不设置就不会影响分配
   - 只是32位的时候设置, 才会影响磁盘分配

** xfs_blkdev_get(xfs_mount, name, block_device)
   - 根据nema打开block_device 
   > blkdev_get_by_path(name, FMODE_READ | FMODE_WRITE | FMODE_EXCL, block_device)

** xfs_blkdev_put(block_device)
   - 关闭设置文件, 为何还需要mode参数??
   > blkdev_put(block_device, FMODE_READ | FMODE_WRITE | FMODE_EXCL)

** xfs_blkdev_issue_flush(xfs_buftarg)
   - 放松flush请求,对应mount的barrier 
   > blkdev_issue_flush(xfs_buftarg->block_device, GFP_NOFS, NULL)

** xfs_close_devices(xfs_mount)
   - 关闭log使用的设备, 设备和xfs_buftarg对应
   > xfs_free_buftarg(xfs_mount, xfs_mount->m_logdev_targp)
   > xfs_blkdev_put(block_device)
   - 然后关闭data的设备 
   > xfs_free_buftarg(xfs_mount, xfs_mount->m_ddev_targp)

** xfs_open_devices(xfs_mount)
   - data的设备已经打开? 只需要打开log设备?
   > xfs_blkdev_get(xfs_mount, xfs_mount->m_logname, block_device)
   - 创建data使用的xfs_buftarg 
   > xfs_alloc_buftarg(xfs_mount, xfs_mount->xfs_super->s_bdev, 0, xfs_mount->m_fsname)
   - 创建log使用的xfs_buftarg, 里面最重要的估计就是bdi
   > xfs_alloc_buftarg(xfs_mount, logdev, 1, xfs_mount->m_fsname)

** xfs_setup_devices(xfs_mount)
   - 设置blocksize/sectorsize
   - sectorsize给block_device, 但应该不会影响到bio
   > xfs_setsize_buftarg(xfs_mount->m_ddev_targp, xfs_mount->xfs_sb->sb_blocksize, xfs_sb->sb_sectsize)
   - 然后设置log的device 
   > xfs_setsize_buftarg(xfs_mount->m_logdev_targp, xfs_sb->sb_blocksize, xfs_sb->sb_logsectsize)

** xfs_init_mount_workqueues(xfs_mount)
   - 创建一系列workqueue
   - xfs_mount->m_dta_workqueue是什么? xfs-data
   - xfs_mount->m_unwritten_workqueue  xfs-conv?
   - xfs_mount->m_cil_workqueue  xfs-cil
   - xfs_mount->m_reclaim_workqueue, xfs-reclaim
   - xfs_moung->m_log_workqueue  xfs-log
   - xfs_mount->m_eofblocks_workqueue   xfs-eofblocks

** xfs_flush_inodes(xfs_mount)
   - 把所有的dirty data写回磁盘?
   > sync_inodes_sb(super_block, jiffies)
   - 提交wb_writeback_work, 启动pdflush的workqueue执行
   - 当前任务只会锁住super_block, 不会锁住inode
   - 对于inode的metadata,使用super_operations->write_inode,但xfs没有实现..

** xfs_fs_alloc_inode(super_block)
   - 创建inode? 不可能调用到这里?

** xfs_fs_destroy_inode(inode)
   - inode_operations->destroy_inode接口? 在销毁inode的最后一步使用
   - xfs_inode没有XFS_IRECLAIMABLE | XFS_IRECLAIM标志?
   - 而且要这只这些标志? 
   > xfs_inode_set_reclaim_tag(xfs_inode)
   - 使用background的回收任务回收不用的xfs_inode? 可能这个inode的IO还没有完成?? 可能metadata还有IO？

** xfs_fs_inode_init_once(xfs_inode)
   - slab的回调函数, 只是初始化inode
   > inode_init_once(inode)

** xfs_fs_evict_inode(inode)
   - inode_operations->evice_inode接口, 删除之前的一步
   - 释放pagecache中的所有page, 等待写IO中的page
   > truncate_inode_pages(address_space, 0)
   - 检查inode的状态, 设置idone->i_state的I_FREEING|I_CLEAR
   > clear_inode(inode)
   - 最后清除xfs_inode的信息, 信息量很大.
   > xfs_inactive(xfs_inode)

** xfs_fs_drop_inode(inode)
   - 检查inode是否必要缓存起来
   - 通用的判断条件
   > generic_drop_inode(inode)
   - 如果xfs_inode->i_flags有XFS_IDONTCACHE, 直接释放

** xfs_free_fsname(xfs_mount)
   - 释放xfs_mount->m_fsname, m_logname

** xfs_fs_put_super(super_block)
   - super_operations->put_super接口 
   - 关闭文件系统?
   > xfs_unmount(xfs_mount)
   - 释放什么? 
   > xfs_freesb(xfs_mount)
   - 释放计数  
   > xfs_icsb_destroy_counter(xfs_mount)
   - 关闭workqueue 
   > xfs_destroy_mount_workqueue(xfs_mount)
   - 关闭设备 
   > xfs_close_devices(xfs_mount)
   - 释放自己 
   > xfs_free_fsname(xfs_mount)
   
** xfs_fs_sync_fs(super_block, wait)
   - super_operations->sync_fs接口
   - 如果wait ==0, 直接返回??
   - 否则提交log 
   > xfs_log_force(xfs_mount, XFS_LOG_SYNC)

** xfs_fs_statfs(dentry, kstatfs)
   - 获取文件系统的信息
   - type = XFS_SB_MAGIC 'XFSB'
   - fsid是什么? 
   > huge_encode_dev(xfs_mount->m_ddev_targp->bt_dev) 
   - sync什么计数 ? 
   > xfs_icsb_sync_counters(xfs_mount, XFS_ICSB_LAZY_COUNT)
   - bsize = xfs_sb->sb_blocksize
   - f_blocks = xfs_sb->sb_dblocks - xfs_sb->sb_logblocks?
   - f_bfree = f_bavail = xfs_sb->sb_fdblocks - XFS_ALLOC_SET_ASIDE(xfs_mount)
   - 上面去掉的是ag的头部?  4个block?
   - f_files = xfs_sb->sb_icount + f_bfree << sb_inopblog, 这的确是最多的, 把空闲空间全部分配为xfs_dinode
   - f_ffree是什么 

** xfs_save_resvblks(xfs_mount)
   - 设置xfs_mount->m_resblks_save = xfs_mount->m_resblks ?? 
   - 这个实现在xfs_fsops.c中
   > xfs_reserve_blocks(xfs_mount, resblks, NULL)

** xfs_restore_resvblks(xfs_mount)
   - 还是预留空间???  先计算需要预留的空间??
   > xfs_reserve_blocks(xfs_mount, resblks, NULL)

** xfs_quiesce_attr(xfs_mount)
   - 把metadata的写回操作, 而不是写回log, 在freeze中使用 
   - 完成之后log全部删除, sync操作却是把log写回
   - 停止log操作?
   - 等待transaction完成?? xfs_mount->m_active_trans > 0
   - 先刷回log数据? 释放pin状态的数据
   > xfs_log_force(xfs_mount, XFS_LOG_SYNC)
   - 回收inode 
   > xfs_reclaim_inodes(xfs_mount, 0)
   > xfs_reclaim_inodes(xfs_mount, SYNC_WAIT)
   - 关闭log 
   > xfs_log_sbcount(xfs_mount)
   > xfs_log_quiesce(xfs_mount)

** xfs_fs_remount(super_block, flags, options)
   - 解析remount的参数, 接受的参数包括, barrier, inode64?
   - 如果是ro => rw, 去掉xfs_mount->m_flags的XFS_MOUNT_RDONLY
   > xfs_mount_log_sb(xfs_mount, xfs_mount->m_update_flgs)
   - 启动预留和log??
   > xfs_restore_resvblks(xfs_mount)
   > xfs_log_work_queue(xfs_mount)
   - 如果rw => ro, 写回所有的数据, 设置xfs_mount->m_flags的XFS_MOUNT_RDONLY 
   > xfs_save_resvblks(xfs_mount)
   > xfs_quiesce_attr(xfs_mount)

** xfs_fs_freeze(super_block)
   - 锁住文件系统之前的操作  
   > xfs_save_resvblks(xfs_mount)
   > xfs_quiesce_attr(xfs_moutn)
   - 写一个空的transaction? 
   > xfs_fs_log_dummy(xfs_mount)

** xfs_fs_unfreeze(super_block)
   - 恢复预留计数? 
   > xfs_restore_resvblks(xfs_mount)
   - 恢复log操作  
   > xfs_log_work_queue(xfs_mount)

** xfs_fs_show_options(seq_file, dentry)
   > xfs_showargs(dentry->super_block, m)

** xfs_finish_flags(xfs_mount)
   - 根据mount option, 计算xfs_mount的成员, m_flags 

** xfs_fs_fill_super(super_block, data, silent)
   - 构造xfs_mount给super_block->s_fs_info
   - data是mount option
   > xfs_parseargs(xfs_mount, data)
   - 打开设备  
   > xfs_open_devices(xfs_mount)
   - 创建workqueue 
   > xfs_init_mount_workqueues(xfs_mount)
   - 初始化系统统计参数  
   > xfs_icsb_init_counters(xfs_mount)
   - 读取磁盘的super_block 
   > xfs_readsb(xfs_mount, flags)
   > xfs_finish_flags(xfs_mount)
   - 创建xfs_buftarg 
   > xfs_setup_devices(xfs_mount)
   - filestream? 
   > xfs_filestream_mount(xfs_mount)
   - 初始化super_block, blocksize, maxbytes, max_links
   > set_posix_acl_flags(super_block)
   - 执行mount?? 
   > xfs_mountfs(xfs_mount)
   - 获取根结点inode  
   > igrab(xfs_mount->m_rootip)
   - 创建对应的dentry 
   > d_make_root(inode)

** xfs_fs_mount(file_system_type, flags, dev_name, data)
   - 使用通用接口, 创建super_block, 执行回调函数
   > mount_bdev(fs_type, flags, dev_name, data, xfs_fs_fill_super)
   
** xfs_fs_nr_cached_objects(super_block, nid)
   - 回收inode?
   > xfs_reclaim_inodes_count(xfs_mount)
   
** xfs_fs_free_cached_objects(super_block, nr_to_scan, nid)
   - 同样是回收缓存的inode

** xfs_init_zones(void)
   - 挂载xfs模块时使用
   - 创建各种kmem_zone, ioend, xlog_ticket, xfs_bmap_item, xfs_btree_cur, xfs_da_state, xfs_ifork, xfs_trans, xfs_log_item_desc, xfs_buf_log_item, xfs_efd_log_item, xfs_efi_log_item, xfs_inode, xfs_inode_log_item, xfs_icreate_item

** xfs_init_workqueues(void)
   - xfsalloc和上面mount时的什么不一样??

** init_xfs_fs()
   - 内存管理
   > xfs_init_zones()
   - workqueues 
   > xfs_init_workqueues()
   - lock cache? 
   > xfs_mru_cache_init()
   - filestream 
   > xfs_filestream_init()
   - xfs_buf? 
   > xfs_buf_init()
   - procfs 
   > xfs_init_procfs()
   - systemctl register? 
   > xfs_sysctl_register()
   - 最后注册文件系统类型  
   > register_filesystem(xfs_fs_type)
* xfs_mount.c
** xfs_uuid_mount(xfs_mount)
   - 检查xfs_mount使用的uuid和使用的xfs是否重复
   - 如果xfs_mount->m_flags有XFS_MOUNT_NOUUID, 返回0
   - 系统中所有的uuid在xfs_uuid_table数组中
   - 遍历数组,比较是否和xfs_mount->xfs_sb->sb_uuid重复
   - 如果重复返回1,已经重复
   - 否返回1,而且把它放到xfs_uuid_table中,这是动态改变长度的
   - 全是0的uuid的地方表示空的表项

** xfs_uuid_umount(xfs_mount)
   - 删除xfs_uuid_table中xfs_mount->xfs_sb->sb_uuid使用的表象,只是重新设为全0

** __xfs_free_perag(rcu_head)
   - 参数是xfs_perag->rcu_head, 异步释放自己

** xfs_free_perag(xfs_mount)
   - 遍历xfs_mount->m_perag_tree中的所有xfs_perag, 使用radix tree
   > radix_tree_delete(xfs_mount->m_perag_tree, agno)
   > call_rcu(xfs_perag->rcu_head, __xfs_free_perag)

** xfs_sb_validate_fsb_count(xfs_sb, nblocks)
   - 检查nblocks表示的长度是否超过xfs限制
   - nblocks单位是fsb, 2^xfs_sb->sb_blocklog
   - 如果使用XFS_BIG_BLKNOS, 最大长度是ULONG_MAX个page

** xfs_initialize_perag(xfs_mount, xfs_agnumber_t agcount, xfs_agnumber_t maxagi)
   - growfs使用?
   - 遍历(0, agcount)范围内的AG
   - 是否已经有xfs_perag 
   > xfs_perag_get(xfs_mount, index)
   - 如果不存在,创建xfs_perag, 放到xfs_mount->m_perag_index
   - 初始化index, xfs_mount, pag_buf_tree
   > radix_tree_insert(xfs_mount->m_perag_tree, index, xfs_perag)
   - ino包含3部分:agno, agblocks, inopb
   - 计算是否使用32位的ino? 
   - 如果不能使用,在xfs_perag中标注
   - 如果xfs_mount->m_flags有XFS_MOUNT_SMALL_INUMS, 要求xfs使用32ino 
   - 大的agno就不合适组合ino, 所以设置xfs_mount->m_flags的XFS_MOUNT_32BITINODES 
   - 如果xfs_mount->m_flags有XFS_MOUNT_32BITINODES 
   > xfs_set_inode32(xfs_mount)
   - 否则设置为64位模式
   > xfs_set_inode64(xfs_mount)
   
** xfs_readsb(xfs_mount, flags)
   - 读取磁盘的xfs_dsb
   - 先获取设备的blocksize, block_device->bd_block_size
   > xfs_getsize_buftarg(xfs_mount->m_ddev_targp)
   - xfs_sb的位置是XFS_SB_DADDR / 0, 使用一个block
   > xfs_buf_read_uncached(xfs_mount->m_ddev_targp, XFS_SB_DADDR, BTOBB(sector_size), 0, xfs_sb_buf_ops)
   - 把数据放到xfs_mount->xfs_sb, 他和xfs_dsb一样,不过数据类型使用本地的,而不是大端的
   > xfs_sb_from_disk(xfs_mount->xfs_sb, XFS_BUF_TO_SBP(xfs_mount))
   - 初始化icbs计数?? 
   > xfs_icsb_reinit_counters(xfs_mount)
   - 把上面读出来的xfs_buf给xfs_mount->m_sb_bp

** xfs_update_alignment(xfs_mount)
   - 更新xfs_mount的参数?
   - mount optoin sunit设置xfs_mount->m_dalign, swidth设置xfs_mount->m_swidth
   - xfs_mount->m_blockmask = xfs_sb->sb_blocksize -1, 表示fsb大小
   - 如果xfs_mount->m_dalign !=0, 单位变为fsb, 同时设置m_swidth
   > XFS_BB_TO_FSBT(xfs_mount, xfs_mount->m_dalign)
   - 同时更新xfs_sb->sb_unit / sb_width
   - 设置xfs_mount->m_update_flags的XFS_SB_UNIT/XFS_SB_WIDTH
   - 如果xfs_mount->m_dalign ==0, 但mount option没有noalign, 而且xfs版本支持sb_unit/sb_width
   - 使用他们设置xfs_mount->m_dalign/m_swidth

** xfs_set_maxicount(xfs_mount)
   - 设置最大支持的ino的数量. 根据xfs_sb->sb_imax_pct 
   > xfs_sb->sb_imax_pct表示可用于inode的最多block的比例
   - xfs_sb->sb_dblocks * xfs_sb->sb_imax_pct / 100 << xfs_sb->sb_inopblog

** xfs_set_rw_sizes(xfs_mount)
   - 设置最小的rsize/wsize? nfs使用?
   - mount option的biosize设置xfs_mount->m_readio_log/m_writeio_log和m_flags的XFS_MOUNT_DFLT_IOSIZE
   - 如果没有设定检查wsync, 专门针对nfs的, 使用默认的小的iosize   read/write = (32k/16k)
   - 否则默认的是(64k/64k)
   - 设置xfs_mount->m_readio_log / m_writeio_log / m_readio_blocks / m_writeio_blocks, 后面2个单位是fsb

** xfs_set_low_space_thresholds(xfs_mount)
   - 计算5个阈值,在preallocation中使用
   - ( 1% -- 5% ) * xfs_sb->sb_dblocks

** xfs_set_inoalignment(xfs_mount)
   - 计算inode分配的block的align?
   - xfs版本需要支持, xfs_sb->sb_inoalignment > xfs_mount->m_inode_cluster_size
   - xfs_mount->m_inode_cluster_size默认是8k
   - xfs_mount->m_dalign有效

** xfs_check_sizes(xfs_mount)
   - 检查data设备和log设备的大小

** xfs_mount_reset_sbqflags(xfs_mount)
   - 重新设置quota的标志

** xfs_default_resblks(xfs_mount)
   - 预留5%的空间, xfs_sb->sb_dblocks * 5%

** xfs_mountfs(xfs_mount)
   - 磁盘中的xfs_dsb已经读取出来, 根据它设置xfs_mount
   - 并计算一些参数数据
   > xfs_sb_mount_common(xfs_mount, xfs_mount->xfs_sb)
   - 根据xfs的版本,计算对应的特性
   > xfs_update_alignment(xfs_mount)
   - 计算btree的属性 
   > xfs_alloc_compute_maxlevels(xfs_mount)
   > xfs_bmap_compute_maxlevels(xfs_mount, XFS_DATA_FORK)
   > xfs_bmap_compute_maxlevels(xfs_mount, XFS_ATTR_FORK)
   > xfs_ialloc_compute_maxlevels(xfs_mount)
   - 计算系统支持的最大ino 
   > xfs_set_maxicount(xfs_mount)
   - 注册uuid 
   > xfs_uuid_mount(xfs_mount)
   - 设置iosize  
   > xfs_set_rw_sizes(xfs_mount)
   - 设置low space阈值  
   > xfs_set_low_space_thresholds(xfs_mount)
   - 设置xfs_mount->m_inode_cluster_size 
   > xfs_set_inoalignment(xfs_mount)
   - 检查磁盘大小
   > xfs_check_sizes(xfs_mount)
   > xfs_rtmount_init(xfs_mount)
   - 根据uuid计算xfs_mount->m_fixedfsid
   - 初始化目录相关的 
   > xfs_dir_mount(xfs_mount)
   - 设置attribute manager?? 
   - xfs_mount->m_attr_magicpct为37%的blocksize
   - 初始化transaction
   > xfs_trans_init(xfs_mount)
   - 初始化AG的xfs_perag 
   > xfs_initialize_perag(xfs_mount, xfs_sb->sb_agcount, xfs_mount->m_maxagi)
   - mount操作也需要log? 
   > xfs_log_mount(xfs_mount, xfs_mount->m_logdev_targp, XFS_FSB_TO_DADDR(xfs_mount, xfs_sb->sb_logstart), XFS_FSB_TO_BB(xfs_mount, xfs_sb->sb_logblocks))
   - 如果xfs支持lazy sbcount? 而且之前的umount不正确?
   > xfs_sb_version_haslazysbcount(xfs_mount->xfs_sb)
   - 通过log recover得知之前umuont是否正确
   > XFS_LAST_UNMOUNT_WAS_CLEAN(xfs_mount)
   - 读取AG的agi/agf,修正文件系统的同计数?
   > xfs_initialize_perag_data(xfs_mount, xfs_sb->sb_agcount)
   - 构造根目录的inode, 给xfs_mount->m_rootip
   > xfs_iget(xfs_mount, NULL, xfs_sb->sb_rootino, 0, XFS_ILOCK_EXCL, xfs_inode)
   - rtmount? 
   > xfs_rtmount_inodes(xfs_mount)
   - 如果需要更新xfs_dsb? xfs_mount->m_update_flags !=0, 而且文件系统可写
   - log对xfs_dsb的修改
   > xfs_mount_log_sb(xfs_mount, xfs_mount->m_update_flags)
   - quota
   - mount完成, 也要log 
   > xfs_log_mount_finish(xfs_mount)
   - 预留空间, 给特殊的transaction使用
   > xfs_default_resblks(xfs_mount)
   > xfs_reserve_blocks(xfs_mount, resblks, NULL)

** xfs_unmountfs(xfs_mount)
   - 取消eofblock的工作? 
   > cancel_delayed_work_sync(xfs_mount->m_eofblocks_work)
   - 刷新log数据  
   > xfs_log_force(xfs_mount, XFS_LOG_SYNC)
   > xfs_ail_push_all_sync(xfs_mount->xfs_ail)
   - 回收inode 
   > xfs_reclaim_inodes(xfs_mount, SYNC_WAIT)
   - 释放预留的空间? 
   > xfs_reserve_blocks(xfs_mount, 0, NULL)
   - 把文件系统的同计数写回磁盘
   > xfs_log_sbcount(xfs_mount)
   - 关闭log 
   > xfs_log_unmount(xfs_mount)
   > xfs_uuid_unmount(xfs_mount)

** xfs_fs_writable(xfs_mount)
   - 检查文件系统是否可写
   - xfs_mount->super_block->s_writers->frozen >0, 不可写
   - 文件系统关闭中,不可写
   > XFS_FORCED_SHUTDOWN(xfs_mount)
   - xfs_mount->m_flags有XFS_MOUNT_RDONLY, 不可写

** xfs_log_sbcount(xfs_mount)
   - 同步计数 
   > xfs_icsb_sync_counters(xfs_mount, 0)
   - 如果xfs不支持lazy sbcount, 在每次修改之后,都会刷会磁盘
   - 所以不需要log这些 
   > xfs_sb_version_haslazysbcount(xfs_sb)
   - 否则创建xfs_trans, log上面的操作  
   > _xfs_trans_alloc(xfs_mount, XFS_TRANS_SB_COUNT, KM_SLEEP)
   > xfs_trans_reserve(xfs_trans, xfs_mount->m_resv->tr_sb, 0, 0)
   > xfs_mod_sb(xfs_trans, XFS_SB_IFREE | XFS_SB_ICOUNT | XFS_SB_FDBLOCKS)
   - 设置xfs_trans的sync标志
   > xfs_trans_set_sync(xfs_trans)
   > xfs_trans_commit(xfs_trans, 0)

** xfs_mod_incore_sb_unlocked(xfs_mount, xfs_sb_field_t, delta, rsvd)
   - 修改xfs_mount->xfs_sb的计数成员, 这里没有修改磁盘中的数据xfs_dsb
   - 修改的成员是xfs_sb_field_t
   - 对于XFS_SBS_ICOUNT, XFS_SBS_IFREE, XFS_SBS_FREXTENTS, XFS_SBS_DBLOCKS, XFS_SBS_AGCOUNT, XFS_SBS_IMAX_PCT, XFS_SBS_RBMBLOCKS, XFS_SBS_RBLOCKS, XFS_SBS_REXTENTS, XFS_SBS_REXTSLOG, 都是直接修改对应的成员变量
   - 对于XFS_SBS_FDBLOCKS, 修改xfs_sb->sb_fdblocks
   - 先计算已经使用的reserve的空间?? res_used =  xfs_mount->m_resblks - xfs_mount->m_resblks_avail
   - 如果delta > 0, 是释放reserve空间?
   - 如果res_used > delta, 直接增加xfs_mount->m_resblks_avail
   - 否则说明释放比已经使用的多? 设置xfs_mount->m_resblks_avail = xfs_mount->m_resblks, 把多余的给xfs_sb->sb_fdblocks
   - 如果delta < 0, 需要分配reserve空间, 先从xfs_sb->sb_fdblocks中分配
   - 如果它不够, 而且参数rsvd !=0, 从xfs_mount->m_resblks_avail分配
   - xfs_sb->sb_fdblocks不能少于阈值 
   > XFS_ALLOC_SET_ASIDE(xfs_mount)

** xfs_mod_incore_sb(xfs_mount, xfs_sb_field_t, delta, rsvd)
   - 锁住xfs_mount->m_sb_lock 
   > xfs_mod_incore_sb_unlocked(xfs_mount, xfs_sb_field_t, delta, rsvd)

** xfs_mod_sb 
   #+BEGIN_SRC 
	xfs_sb_field_t	msb_field;	/* Field to modify, see below */
	int64_t		msb_delta;	/* Change to make to specified field */   
   #+END_SRC

** xfs_mod_incore_sb_batch(xfs_mount, xfs_mod_sb, uint nmsb, rsvd)
   - 修改xfs_sb的多个成员
   - 遍历xfs_mod_sb数组
   > xfs_mod_incore_sb_unlocked(xfs_mount, xfs_mod_sb->msb_field, xfs_mod_sb->msb_delta)

** xfs_getsb(xfs_mount, flags)
   - 操作xfs_dsb所在的block, 也就是xfs_mount->m_sb_bp 
   > xfs_buf_trylock(xfs_buf)
   - 增加xfs_buf的使用计数??

** xfs_freesb(xfs_mount)
   - 释放xfs_mount->m_sb_bp 
   > xfs_buf_relse(xfs_buf)

** xfs_mount_log_sb(xfs_mount, fields)
   - 修改对xfs_sb的修改
   - fields必须包含固定的成员? XFS_SB_UNIT | XFS_SB_WIDTH | XFS_SB_UUID | XFS_SB_FEATURES2 | XFS_SB_VERSIONNUM ??
   - 构造xfs_trans
   > xfs_trans_alloc(xfs_mount, XFS_TRANS_SB_UNIT)
   - 怎么预留空间?
   > xfs_trans_reserve(xfs_trans, xfs_mount->m_resv->tr_sb, 0, 0)
   - 修改xfs_mount->xfs_sb
   > xfs_mod_sb(xfs_trans, fields)
   > xfs_trans_commit(xfs_trans, 0)

** xfs_dev_is_read_only(xfs_mount, message)
   - 检查data设备和log设备是否可以只读?
   > xfs_readonly_buftarg(xfs_mount->m_ddev_targp)

** xfs_icsb_cnts
   #+BEGIN_SRC 
	uint64_t	icsb_fdblocks;
	uint64_t	icsb_ifree;
	uint64_t	icsb_icount;
	unsigned long	icsb_flags;   
   #+END_SRC

** xfs_icsb_cpu_notify(notifier_block, action, hcpu)
   - 使用per-cpu的计数,加快一些操作频繁的计数修改. 而不是直接修改xfs_sb的计数
   - 这时cpu时间的回调函数, 处理per-cpu计数
   - 对于CPU_UP_PREPARE / CPU_UP_PREPARE_FROZEN, 清空自己的xfs_icsb_cnts_t计数
   - 对于CPU_ONLINE / CPU_ONLINE_FROZEN, 分配3个计数
   - XFS_SBS_ICOUNT , XFS_SBS_IFREE, XFS_SBS_FDBLOCKS, 对应xfs_icsb_cnts成员和xfs_sb中的成员
   > xfs_icsb_balance_counter(xfs_mount, XFS_SBS_ICOUNT, 0)
   - 对于CPU_DEAD / CPU_DEAD_FROZEN, 关闭hcpu对应的计数 
   > xfs_icsb_disable_counter(xfs_mount, XFS_SBS_ICOUNT)
   > xfs_icsb_balance_counter_locked(xfs_mount, XFS_SBS_ICOUNT, 0)

** xfs_icsb_init_counters(xfs_mount)
   - 创建per-cpu变量xfs_mount->m_sb_cnts
   - xfs_mount->m_icsb_counters表示cpu的计数是否启用? 默认为-1, 所以的都关闭
   - 注册cpu通知 
   > register_hotcpu_notifier(xfs_mount->m_icsb_notifier)

** xfs_icsb_reinit_counters(xfs_mount)
   - 重新初始化所有的计数?? 
   - 设置xfs_mount->m_icsb_counters = -1 
   > xfs_icsb_balance_counter(xfs_mount, XFS_SBS_ICOUNT, 0)

** xfs_icsb_destroy_counters(xfs_mount)
   - 注销cpu通知事件,释放per-cup变量
   > unregister_hotcpu_notifier(xfs_mount->m_icsb_notifier)
   > free_percpu(xfs_mount->m_sb_cnts)

** xfs_icsb_lock_cntr(xfs_icsb_cnts)
   - 等待xfs_icsb_cnts->icsb_flags的XFS_ICSB_FLAG_LOCK标志
   > ndelay(100)

** xfs_icsb_unlock_cntr(xfs_icsb_cnts)
   - 去掉xfs_icsb_cnts->icsb_flags的XFS_ICSB_FLAG_LOCK标志

** xfs_icsb_lock_all_counters(xfs_mount)
   - 锁住所有的xfs_icsb_cnts->icsb_flags, 可能会等待这些锁  
   - 遍历每个cpu的变量 
   > xfs_icsb_lock_cntr(xfs_icsb_cnts)

** xfs_icsb_unlock_all_counters(xfs_mount)
   - 释放fs_icsb_cnts的锁  
   > xfs_icsb_unlock_cntr(xfs_icsb_cnts)
   - 这里的锁等待也是忙等，释放锁也没有唤醒 

** xfs_icsb_count(xfs_mount, xfs_icsb_cnts, flags)
   - 初始化xfs_icsb_cnts?
   - 如果flags没有XFS_ICSB_LAZY_COUNT? 需要锁住xfs_icsb_cnts 
   > xfs_icsb_lock_all_counters(xfs_mount)
   - 遍历所有的xfs_mount->m_sb_cnts, 累加3个成员变量
   - 结果给参数xfs_icsb_cnts

** xfs_icsb_counter_disabled(xfs_mount, xfs_sb_field_t)
   - 检查xfs_sb_field_t对应的计数是否可用? 
   - xfs_mount->m_icsb_counters的对应标志表示着一个成员使用使用per-cpu计数 

** xfs_icsb_disable_counter(xfs_mount, xfs_sb_field_t)
   - 禁止使用xfs_sb_field_t对应的per-cpu计数 
   - 如果已经关闭直接返回
   > xfs_icsb_counter_disabled(xfs_mount, xfs_sb_field_t)
   - 先去掉xfs_mount->m_icsb_counters中对应标志 
   - 然后获取对应的计数
   > xfs_icsb_count(xfs_mount, xfs_icsb_cnts, XFS_ICSB_LAZY_COUNT)
   - 根据xfs_sb_field_t, 设置上xfs_mount->xfs_sb

** xfs_icsb_enable_counter(xfs_mount, xfs_sb_field_t, count, resid)
   - 开始使用xfs_sb_field_t的per-cpu计数
   - 遍历xfs_mount->m_sb_cnts的xfs_icsb_cnts_t
   - 根据xfs_sb_field_t, 设置xfs_icsb_cnts的成员,第一个cpu设置为count + resid, 其他设置为count
   - 最后去掉xfs_mount->m_icsb_counters的标志

** xfs_icsb_sync_counters_locked(xfs_mount, flags)
   - 累加xfs_mount->m_sb_cnts的计数
   > xfs_icsb_count(xfs_mount, xfs_icsb_cnts, flags)
   - 如果xfs_mount->m_icsb_counters表示使用它, 设置xfs_mount->xfs_sb

** xfs_icsb_sync_counters(xfs_mount, flags)
   - 使用xfs_mount->m_sb_lock保护. 获取所有计数, 放到xfs_sb中
   > xfs_icsb_sync_counters_locked(xfs_mount, flags)

** xfs_icsb_balance_counter_locked(xfs_mount, xfs_sb_field_t, min_per_cpu)
   - 首先关闭对应的标志, 而且统计所有的变量
   > xfs_icsb_disable_counter(xfs_mount, xfs_sb_field_t)
   - 处理xfs_sb_field_t对应的成员
   - 然后平均xfs_sb中的值. 如果总的值不超过阈值,或平均之后不超过min_per_cpu
   - 不再使用per-cpu计数
   - 对于icount/ifree, 阈值是XFS_ICSB_INO_CNTR_REENABLE(64)
   - 对于fdblocks, 表示可用磁盘空间, 512 + 特殊reserve的空间
   > XFS_ICSB_FDBLK_CNTR_REENABLE(xfs_mount)
   - 如果可以使用per-cpu计数  
   > xfs_icsb_enable_counter(xfs_mount, xfs_sb_field_t, count, resid)
   - 上面平均操作时,可能不会整除,所以余数给第一个pcu

** xfs_icsb_balance_counter(xfs_mount)
   - 使用xfs_mount->m_sb_lock保护
   > xfs_icsb_balance_counter_locked(xfs_mount, xfs_sb_field_t, min_per_cpu)

** xfs_icsb_modify_counters(xfs_mount, xfs_sb_field_t, delta, rsvd)
   - 修改xfs_sb的计数成员
   - 首先检查是否有per-cpu计数 
   > xfs_icsb_counter_disabled(xfs_mount, xfs_sb_field_t)
   - 如果有修改per-cpu的变量
   - 如果per-cpu分配失败,需要重新计算per-cpu的值 
   > xfs_icsb_balance_counter(xfs_mount, xfs_sb_field_t, delta)
   - 否则使用xfs_mount->xfs_sb
   > xfs_mod_incore_sb_unlocked(xfs_mount, xfs_sb_field_t, delta, rsvd)

* xfs_fsops.c

** xfs_fsop_geon 
   #+BEGIN_SRC 
	__u32		blocksize;	/* filesystem (data) block size */
	__u32		rtextsize;	/* realtime extent size		*/
	__u32		agblocks;	/* fsblocks in an AG		*/
	__u32		agcount;	/* number of allocation groups	*/
	__u32		logblocks;	/* fsblocks in the log		*/
	__u32		sectsize;	/* (data) sector size, bytes	*/
	__u32		inodesize;	/* inode size in bytes		*/
	__u32		imaxpct;	/* max allowed inode space(%)	*/
	__u64		datablocks;	/* fsblocks in data subvolume	*/
	__u64		rtblocks;	/* fsblocks in realtime subvol	*/
	__u64		rtextents;	/* rt extents in realtime subvol*/
	__u64		logstart;	/* starting fsblock of the log	*/
	unsigned char	uuid[16];	/* unique id of the filesystem	*/
	__u32		sunit;		/* stripe unit, fsblocks	*/
	__u32		swidth;		/* stripe width, fsblocks	*/
	__s32		version;	/* structure version		*/
	__u32		flags;		/* superblock version flags	*/
	__u32		logsectsize;	/* log sector size, bytes	*/
	__u32		rtsectsize;	/* realtime sector size, bytes	*/
	__u32		dirblocksize;	/* directory block size, bytes	*/
	__u32		logsunit;	/* log stripe unit, bytes */   
   #+END_SRC

** xfs_growfs_data 
   #+BEGIN_SRC 
	__u64		newblocks;	/* new data subvol size, fsblocks */
	__u32		imaxpct;	/* new inode space percentage limit */   
   #+END_SRC

** xfs_agf
   #+BEGIN_SRC 
	/*
	 * Common allocation group header information
	 */
	__be32		agf_magicnum;	/* magic number == XFS_AGF_MAGIC */
	__be32		agf_versionnum;	/* header version == XFS_AGF_VERSION */
	__be32		agf_seqno;	/* sequence # starting from 0 */
	__be32		agf_length;	/* size in blocks of a.g. */
	/*
	 * Freespace information
	 */
	__be32		agf_roots[XFS_BTNUM_AGF];	/* root blocks */
	__be32		agf_spare0;	/* spare field */
	__be32		agf_levels[XFS_BTNUM_AGF];	/* btree levels */
	__be32		agf_spare1;	/* spare field */

	__be32		agf_flfirst;	/* first freelist block's index */
	__be32		agf_fllast;	/* last freelist block's index */
	__be32		agf_flcount;	/* count of blocks in freelist */
	__be32		agf_freeblks;	/* total free blocks */

	__be32		agf_longest;	/* longest free space */
	__be32		agf_btreeblks;	/* # of blocks held in AGF btrees */
	uuid_t		agf_uuid;	/* uuid of filesystem */

	/*
	 * reserve some contiguous space for future logged fields before we add
	 * the unlogged fields. This makes the range logging via flags and
	 * structure offsets much simpler.
	 */
	__be64		agf_spare64[16];

	/* unlogged fields, written during buffer writeback. */
	__be64		agf_lsn;	/* last write sequence */
	__be32		agf_crc;	/* crc of agf sector */
	__be32		agf_spare2;

	/* structure must be padded to 64 bit alignment */   
   #+END_SRC

** xfs_agfl 
   #+BEGIN_SRC 
	__be32		agfl_magicnum;
	__be32		agfl_seqno;
	uuid_t		agfl_uuid;
	__be64		agfl_lsn;
	__be32		agfl_crc;
	__be32		agfl_bno[];	/* actually XFS_AGFL_SIZE(mp) */   
   #+END_SRC

** xfs_fsop_counts 
   #+BEGIN_SRC 
	__u64	freedata;	/* free data section blocks */
	__u64	freertx;	/* free rt extents */
	__u64	freeino;	/* free inodes */
	__u64	allocino;	/* total allocated inodes */   
   #+END_SRC

** xfs_fs_geometry(xfs_mount, xfs_fsop_geom_t, new_version)
   - 从xfs_sb中获取xfs_fsop_geom中的变量
   - xfs_fsop_geon->flags需要根据xfs的版本计算
   - xfs_sb->sb_versionnum

** xfs_growfs_get_hdr_buf(xfs_mount, xfs_daddr blkno, size_t numblks, flags, xfs_buf_ops)
   - 准备一个xfs_buf, 长度是numblks
   > xfs_buf_get_uncached(xfs_mount->m_ddev_targp, numblks, flags)
   - 设置磁盘位置 blkno

** xfs_growfs_data_private(xfs_mount, xfs_growfs_data)
   - xfs_growfs_data->newblocks表示新增的空间, 必须超过xfs_sb->sb_dblocks
   - 获取newblocks对应的xfs_buf? 
   > xfs_buf_read_uncached(xfs_mount->m_ddev_targp, XFS_FSB_TO_BB(xfs_mount, nb) - XFS_FSS_TO_BB(xfs_mount, 1), XFS_FSS_TO_BB(xfs_mount, 1), 0, NULL)
   - 通过IO, 检查是否能访问扩展的磁盘位置 
   > xfs_buf_relse(xfs_buf)
   - 创建新的AG的xfs_buftarg
   > xfs_initialize_perag(xfs_mount, new_agcount, agimax)
   - 创建xfs_trans, 设置xfs_trans->t_flags的XFS_TRANS_RESERVE
   > xfs_trans_alloc(xfs_mount, XFS_TRANS_GROWFS)
   > xfs_trans_reserve(xfs_trans, xfs_mount->m_resv->tr_growdata, XFS_GROWFS_SPACE_RES(xfs_mount), 0)
   - 遍历新的AG, 创建对应的agf/agfl/agi/根结点 
   - 初始化AGF block agf的实现在xfs_alloc.c中, 管理磁盘的空间
   - 获取agf对应的xfs_buf, 他使用一个sector, FSS表示sector size?
   > xfs_growfs_get_hdr_buf(xfs_mount, XFS_AG_DADDR(xfs_mount, agno, XFS_AGF_DADDR(xfs_mount), XFS_FSS_TO_BB(xfs_mount, 1), 0, xfs_agf_buf_ops))
   > XFS_BUF_TO_AGF(xfs_buf)
   - 设置magic, version, seqno = agno, agf_length
   - agf_roots是XFS_BNO_BLOCK(xfs_mount) 和 XFS_CNT_BLOCK(xfs_mount), agf_levels都是1
   - 对于AG, 第0个sector是SB? 第1是AGF, 第2个是AGI, 第3个是AGFL
   - 后面的以fsb为单位, 后面2个AGF的2个树根, 再后面是AGI的树根
   - AG已经使用的空间是上面这些 
   > XFS_PREALLOC_BLOCKS(xfs_mount)
   - 设置agf_freeblks = agf_longest = agf_length - 已经使用的空间
   - 设置agf_fifirst = 0,flcount = 0, agf_fllast是AGFL中指针的长度
   - 初始化后就是 ( sb_sectorsize - sizeof(xfs_agfl) ) / sizeof(xfs_agblock_t)
   > XFS_AGFL_SIZE(xfs_mount)
   - 设置uuid, 然后写回磁盘
   > xfs_bwrite(xfs_buf)
   > xfs_buf_relse(xfs_buf)
   - 初始化AGFL block, agfl管理也在xfs_alloc.c中实现
   > xfs_growfs_get_hdr_buf(xfs_mount, XFS_AG_DADDR(xfs_mount, agno, XFS_AGFL_DADDR(xfs_mount)), XFS_FSS_TO_BB(xfs_mount, 1), 0, xfs_agfl_buf_ops)
   - 把xfs_buf的磁盘清0
   - 设置xfs_agfl的magicnum, seqno, uuid
   - 所有的指针都初始化为NULLAGBLOCK / -1
   > xfs_bwrite(xfs_buf)
   > xfs_buf_relse(xfs_buf)
   - 初始化agi block, 管理AG中的xfs_dinode使用的空间
   > xfs_growfs_get_hdr_buf(xfs_mount, XFS_AG_DADDR(xfs_mount, agno, XFS_AGI_DADDR(xfs_mount)), XFS_FSS_TO_BB(xfs_mount, 1), 0, xfs_agi_buf_ops)
   - 设置成员agi_magicnum, agi_versionnum, agi_seqno, length就是AG的大小
   - agi_count = 0, 这时还没有
   - agi_root = XFS_IBT_BLOCK(xfs_mount), 在agi的根结点后面
   - agi_level = 1, 只有一个空的叶子节点
   - agi_freecount =0, agi_newino = agi_dirino = NULLAGINO
   - 设置unlinked的hash表头节点, 都指向NULLAGINO / -1
   - 写回磁盘 
   > xfs_bwrite(xfs_buf)
   - 初始化BNO根结点, 现在应该只有一个extent 
   - 这里读取的xfs_buf长度是blocksize, 而不是sectorsize
   > xfs_growfs_get_hdr_buf(xfs_mount, XFS_AGB_TO_DADDR(xfs_mount, agno, XFS_BNO_BLOCK(xfs_mount)), BTOBB(xfs_sb->sb_blocksize), 0, xfs_allocbt_buf_ops)
   - 初始化xfs_btree_block 
   > xfs_btree_init_block(xfs_mount, xfs_buf, XFS_ABTB_CRC_MAGIC, 0, 1, agno, XFS_BTREE_CUR_BLOCKS)
   - btree里面的记录是xfs_alloc_rec, 初始化第一个
   > XFS_ALLOC_REC_ADDR(xfs_mount, XFS_BUF_TO_BLOCK(xfs_buf), 1)
   - ar_startblock = XFS_PREALLOC_BLOCKS(xfs_mount)
   - ar_blockcount = agsize - ar_startblock
   > xfs_bwrite(xfs_buf)
   > xfs_buf_relse(xfs_buf)
   - 初始化CNT根结点, 里面也只有一个extent
   > xfs_growfs_get_hdr_buf(xfs_mount, XFS_AGB_TO_DADDR(xfs_mount, agno, XFS_CNT_BLOCK(xfs_mount)), BTOBB(xfs_sb->sb_blocksize), 0, xfs_allocbt_buf_ops)
   - 初始化xfs_btree_block
   > xfs_btree_init_block(xfs_mount, xfs_buf, XFS_ABTC_CRC_MAGIC, 0, 1, agno, XFS_BTREE_CRC_BLOCKS)
   - 创建唯一的一个xfs_alloc_rec，和上面一样, 然后写回磁盘
   - 初始化AGI/INO使用的根结点
   > xfs_growfs_get_hdr_buf(xfs_mount, XFS_AGB_TO_DADDR(xfs_mount, agno, XFS_IBT_BLOCK(xfs_mount)), BTOBB(xfs_sb->sb_blocksize), 0, xfs_inobt_buf_ops)
   - btree是空的,只需要设置xfs_btree_block 
   > xfs_btree_init_block(xfs_mount, xfs_buf, XFS_IBT_CRC_MAGIC, 0, 0, agno, XFS_BTREE_CRC_BLOCKS)
   > xfs_bwrite(xfs_buf)
   > xfs_buf_relse(xfs_buf)
   - 遍历过程中,使用新创建的AG的大小消耗新增的空间 newsize
   - 如果最后newsize > 0, 说明grow之前,最后一个AG的空间不满, 这里需要补齐 
   - 修改xfs_agi->agi_length
   > xfs_ialloc_read_agi(xfs_mount, xfs_trans, agno, xfs_buf)
   > xfs_ialloc_log_agi(xfs_trans, xfs_buf, XFS_AGI_LENGTH)
   - 改变xfs_agf->agf_length 
   > xfs_alloc_read_agf(xfs_mount, xfs_trans, agno, 0, xfs_buf)
   > xfs_alloc_log_agf(xfs_trans, xfs_buf, XFS_AGF_LENGTH)
   - 最后释放新增加的空间
   > xfs_free_extent(xfs_trans, XFS_AGB_TO_FSB(xfs_mount, agno, xfs_agf->agf_length - newsize), newsize)
   - 更新xfs_sb的统计数 
   - AG的个数
   > xfs_trans_mod_sb(xfs_trans, XFS_TRANS_SB_AGCOUNT, newagcount - oldagcount)
   - 磁盘空间 
   > xfs_trans_mod_sb(xfs_trans, XFS_TRANS_SB_DBLOCKS, newblock - xfs_sb->sb_dblocks)
   - 空闲空间  
   > xfs_trans_mod_sb(xfs_trans, XFS_TRANS_SB_FDBLOCKS, nfree)
   - 分配比率也变了? 
   > xfs_trans_mod_sb(xfs_trans, XFS_TRANS_SB_IMAXPCT, dpct)
   - 提交log 
   > xfs_trans_commit(xfs_trans, 0)
   - 更新xfs_mount的成员参数, m_maxagi, m_maxicount 
   > xfs_set_low_space_thresholds(xfs_mount)
   - 最后更新每个AG的xfs_dsb 
   - 对于老的AG, 需要读取xfs_buf
   > xfs_trans_read_buf(xfs_mount, NULL, xfs_mount->m_ddev_targp, XFS_AGB_TO_DADDR(xfs_mount, agno, XFS_SB_BLOCK(xfs_mount)), XFS_FSS_TO_BB(xfs_mount, 1), 0, xfs_buf, xfs_sb_buf_ops)
   - 对于新的AG, 没必要读磁盘
   > xfs_trans_get_buf(NULL, xfs_mount->m_ddev_targp, XFS_AGB_TO_DADDR(xfs_mount, agno, XFS_SB_BLOCK(xfs_mount)), XFS_FSS_TO_BB(xfs_mount, 1), 0)
   - 而且清0
   > xfs_buf_zero(xfs_buf, 0, BBTOB(xfs_buf->b_length))
   - 把xfs_sb写给xfs_dsb 
   > xfs_sb_to_disk(XFS_BUF_TO_SBP(xfs_buf), xfs_mount->xfs_sb, XFS_SB_ALL_BITS)
   > xfs_bwrite(xfs_buf)
   > xfs_buf_relse(xfs_buf)

** xfs_growfs_log_private(xfs_mount, xfs_growfs_log_t)
   - 增长log使用的磁盘空间?  没有实现吧!!!

** xfs_growfs_data(xfs_mount, xfs_growfs_data)
   - 锁住xfs_mount->m_growlock
   > xfs_growfs_data_private(xfs_mount, xfs_growfs_data)

** xfs_growfs_log(xfs_mount, xfs_growfs_log_t)
   - ???

** xfs_fs_counts(xfs_mount, xfs_fsop_counts)
   - 首先同步xfs_sb的统计数  
   > xfs_icsb_sync_counters(xfs_mount, XFS_ICSB_LAZY_COUNT)
   - 把xfs_sb的成员给xfs_fsop_counts, freedata/freeino/allocino

** xfs_fsop_resblks 
   #+BEGIN_SRC 
	__u64  resblks;
	__u64  resblks_avail;   
   #+END_SRC

** xfs_reserve_blocks(xfs_mount, inval, xfs_fsop_resblks)
   - 通过ioctl的XFS_IOC_SET_RESBLKS和XFS_IOC_GET_RESBLKS实现
   - 如果inval是0, 返回xfs_mount的信息, m_resblks / m_resblks_avail
   - 否则reserve空间
   - 首先同步per-cpu和xfs_sb的计数 
   > xfs_icsb_sync_counters_locked(xfs_mount, 0)
   - 如果xfs_mount->m_resblks > request? 表示已经reserve足够的空间
   - 如果xfs_mount->m_resblks_avail > request, 把他多余的给xfs_sb
   - 设置xfs_mount->m_resblks / m_resblks_avail = request ??
   - 否则xfs_mount->m_resblks不够,需要从xfs_sb中分配
   - 如果xfs_sb->sb_fdblocks足够,可以分配, 填充xfs_mount->m_resblks / m_resblks_avail
   - 否则不再reserve空间
   - 最后更新xfs_sb的XFS_SBS_FDBLOCKS统计数 
   > xfs_icsb_modify_counters(xfs_mount, XFS_SBS_FDBLOCKS, fdblocks_delta, 0)

** xfs_fs_log_dummy(xfs_mount)
   - 提交一个空的log  
   > _xfs_trans_alloc(xfs_mount, XFS_TRANS_DUMMY1, KM_SLEEP)
   > xfs_trans_reserve(xfs_trans, xfs_mount->m_resv->tr_sb, 0, 0)
   > xfs_mod_sb(xfs_trans, XFS_SB_UUID)
   > xfs_trans_set_sync(xfs_trans)
   > xfs_trans_commit(xfs_trans, 0)

** xfs_fs_goingdown(xfs_mount, inflags)
   - 处理ioctl命令
   - 如果是XFS_FSOP_GOING_FLAGS_DEFAULT, freeze操作  
   > freeze_bdev(super_block->s_bdev)
   - umount??
   > xfs_force_shutdown(xfs_mount, SHUTDOWN_FORCE_UMOUNT)
   > thaw_bdev(super_block->block_device, super_block)
   - 如果是XFS_FSOP_GOING_FLAGS_LOGFLUSH, 同样关闭? 
   > xfs_force_shutdown(xfs_mount, SHUTDOWN_FORCE_UMOUNT)
   - 如果是XFS_FSOP_GOING_FLAGS_NOLOGFLUSH
   > xfs_force_shutdown(xfs_mount, SHUTDOWN_FORCE_UMOUNT | SHUTDOWN_LOG_IO_ERROR)

** xfs_do_force_shutdown(xfs_mount, flags, name, num)
   - 没有umount操作,仅仅是关闭文件系统,保持数据的一致性?
   - 如果文件系统已经关闭, 而且flags没有SHUTDOWN_LOG_IO_ERROR, 直接退出?
   > XFS_FORCED_SHUTDOWN(xfs_mount)
   - 不再写任何log??
   > xfs_log_force_umount(xfs_mount, logerror)
   - 其他就是打印调试信息
